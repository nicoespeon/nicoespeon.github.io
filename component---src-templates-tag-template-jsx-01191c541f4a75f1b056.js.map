{"version":3,"sources":["webpack:///./src/components/TagTemplateDetails/index.jsx","webpack:///./src/templates/tag-template.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/helpers.js","webpack:///./src/hocs/withLocalMoment/index.jsx","webpack:///./src/components/Post/index.jsx"],"names":["TagTemplateDetails","render","i18n","this","props","items","data","allMarkdownRemark","edges","filter","post","node","fields","slug","startsWith","lang","map","react_default","a","createElement","Post","key","tagTitle","pageContext","tag","title","en","fr","className","React","Component","TagTemplate","site","siteMetadata","pageTitle","description","Layout","Helmet_default","SEO","location","pathname","Sidebar","components_TagTemplateDetails","pageQuery","withI18n","query","_ref","_ref$meta","meta","_ref$title","_ref$slug","_ref$lang","_ref$image","image","profilePic","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","metaDescription","subtitles","metaImage","url","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","Object","assign","htmlAttributes","titleTemplate","name","content","property","author","twitter","concat","_public_static_d_3867784087_json__WEBPACK_IMPORTED_MODULE_1__","formatTimeToRead","timeToRead","cupCount","Math","round","cups","Array","fill","join","withLocalMoment","WrappedComponent","react__WEBPACK_IMPORTED_MODULE_1___default","localMoment","date","moment","locale","_this$props","_this$props$data$node","frontmatter","category","_this$props$data$node2","categorySlug","read","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","dateTime","format"],"mappings":"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","file":"component---src-templates-tag-template-jsx-01191c541f4a75f1b056.js","sourcesContent":["import React from 'react'\nimport Post from '../Post'\n\nclass TagTemplateDetails extends React.Component {\n  render() {\n    const { i18n } = this.props\n\n    const posts = this.props.data.allMarkdownRemark.edges\n    const items = posts\n      .filter(post => {\n        const postLang = post.node.fields.slug.startsWith('/fr/') ? 'fr' : 'en'\n        return postLang === i18n.lang\n      })\n      .map(post => <Post data={post} key={post.node.fields.slug} i18n={i18n} />)\n\n    const tagTitle = this.props.pageContext.tag\n    const title = {\n      en: `All posts tagged as \"${tagTitle}\"`,\n      fr: `Tous les articles tagués \"${tagTitle}\"`,\n    }[i18n.lang]\n\n    return (\n      <div className=\"content\">\n        <div className=\"content__inner\">\n          <div className=\"page\">\n            <h1 className=\"page__title\">{title}</h1>\n            <div className=\"page__body\">{items}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TagTemplateDetails\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport withI18n from '../hocs/withI18n'\nimport Layout from '../components/Layout'\nimport Sidebar from '../components/Sidebar'\nimport SEO from '../components/SEO'\nimport TagTemplateDetails from '../components/TagTemplateDetails'\n\nclass TagTemplate extends React.Component {\n  render() {\n    const { title } = this.props.data.site.siteMetadata\n    const { tag } = this.props.pageContext\n\n    const {\n      i18n: { lang },\n    } = this.props\n    const pageTitle = `Tag \"${tag}\" - ${title}`\n    const description = {\n      en: `All my posts tagged as \"${tag}\".`,\n      fr: `Tous mes articles avec l’étiquette \"${tag}\".`,\n    }[lang]\n\n    return (\n      <Layout>\n        <div>\n          <Helmet title={pageTitle} />\n          <SEO\n            title={pageTitle}\n            description={description}\n            slug={this.props.location.pathname}\n            lang={lang}\n          />\n          <Sidebar {...this.props} />\n          <TagTemplateDetails {...this.props} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default withI18n(TagTemplate)\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n        subtitles {\n          en\n          fr\n        }\n        greetings {\n          en\n          fr\n        }\n        menus {\n          en {\n            label\n            path\n          }\n          fr {\n            label\n            path\n          }\n        }\n        author {\n          name\n          email\n          twitter\n          github\n          linkedin\n          rss\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: {\n        frontmatter: {\n          tags: { in: [$tag] }\n          layout: { eq: \"post\" }\n          draft: { ne: true }\n        }\n      }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          timeToRead\n          frontmatter {\n            title\n            date\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport profilePic from '../../pages/photo.jpg'\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        subtitles {\n          en\n          fr\n        }\n        url\n        author {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nfunction SEO({\n  meta = [],\n  title = '',\n  slug = '',\n  lang = 'en',\n  image = profilePic,\n  description,\n}) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site\n        const metaDescription = description || siteMetadata.subtitles[lang]\n        const metaImage = `${siteMetadata.url}/${image}`\n        const url = `${siteMetadata.url}${slug}`\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: siteMetadata.title,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: `@${siteMetadata.author.twitter}`,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nexport default SEO\n","/* eslint-disable import/prefer-default-export */\n// This one is intentional.\nexport function formatTimeToRead(timeToRead, lang) {\n  const cupCount = Math.round(timeToRead / 5) || 1\n  const cups = new Array(cupCount).fill('☕').join('')\n\n  return {\n    en: `${cups} ${timeToRead} min read`,\n    fr: `${cups} ${timeToRead} min de lecture`,\n  }[lang]\n}\n/* eslint-enable import/prefer-default-export */\n","import React from 'react'\nimport moment from 'moment'\nimport 'moment/locale/fr'\n\nfunction withLocalMoment(WrappedComponent) {\n  return props => {\n    const localMoment = date => moment(date).locale(props.i18n.lang)\n    return <WrappedComponent {...props} localMoment={localMoment} />\n  }\n}\n\nexport default withLocalMoment\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { formatTimeToRead } from '../../helpers'\nimport withLocalMoment from '../../hocs/withLocalMoment'\nimport './style.scss'\n\nclass Post extends React.Component {\n  render() {\n    const { i18n, localMoment } = this.props\n    const { timeToRead } = this.props.data.node\n    const {\n      title,\n      date,\n      category,\n      description,\n    } = this.props.data.node.frontmatter\n    const { slug, categorySlug } = this.props.data.node.fields\n\n    const read = {\n      en: 'Read',\n      fr: 'Lire',\n    }[i18n.lang]\n\n    return (\n      <div className=\"post\">\n        <h2 className=\"post__title\">\n          <Link className=\"post__title-link\" to={slug}>\n            {title}\n          </Link>\n        </h2>\n        <div className=\"post__meta\">\n          <time\n            className=\"post__meta-time\"\n            dateTime={localMoment(date).format('MMMM D, YYYY')}\n          >\n            {localMoment(date).format('MMMM YYYY')}\n          </time>\n          <span className=\"post__meta-divider\" />\n          <small className=\"post__meta-readtime\">\n            {formatTimeToRead(timeToRead, i18n.lang)}\n          </small>\n          <span className=\"post__meta-divider\" />\n          <span className=\"post__meta-category\" key={categorySlug}>\n            <Link to={categorySlug} className=\"post__meta-category-link\">\n              #{category}\n            </Link>\n          </span>\n        </div>\n        <p className=\"post__description\">{description}</p>\n        <Link className=\"post__readmore link-underlined\" to={slug}>\n          {read}\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default withLocalMoment(Post)\n"],"sourceRoot":""}