{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about VS Code, web development and life in general.","fr":"J’écris à propos de VS Code, du développement web et de la vie en général."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"1979b6b6-6f3f-5e0e-b222-2f79454e2856","html":"<h2 id=\"tldr\"><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>If you don’t care about variable scoping in JavaScript, you may face some unpleasant troubles. <strong>Properly isolate your script environment</strong> is a best practice to have so you don’t override global variables when it executes.</p>\n<p><strong>Immediately-invoked function expressions</strong> (IIFE) allow you do to that:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your JS code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Moreover, it makes your code flexible and robust so you can create global variables aliases as parameters for your script:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your JS code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"its-all-about-scope\"><a href=\"#its-all-about-scope\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>It’s all about scope</h2>\n<p>I bet you wouldn’t like your new script not to behave as you want because the <code class=\"language-text\">gobgob</code> variable you use is already declared somewhere else and you didn’t pay attention for that.</p>\n<p>I would even be worse if your splendid slideshow plugin starts going wrong when your new script is executing. Why? Because you didn’t notice that this plugin use the same variable you do and that you just change its value - if so, it wouldn’t be such a splendid plugin by the way.</p>\n<p>To avoid that kind of scenario, you have to <strong>isolate your script</strong> from the rest of the environment, so it’s still safe. It’s dead easy to do and, if your slideshow plugin were a good one, that’s what it should have done!</p>\n<h3 id=\"few-reminder-about-scope-in-js\"><a href=\"#few-reminder-about-scope-in-js\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Few reminder about scope in JS</h3>\n<p>If you declare properly a variable, it would be accessible from the whole script which is <em>inside</em> it’s container.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"Hey!\"</span>\n<span class=\"token function\">myFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>On the contrary, a variable properly declared into a function is not accesible from the outside of this function: the scope is limited to the function.</p>\n<p>However, if you forget to use the <code class=\"language-text\">var</code> keyword when you declare your variable, you’ll make it <strong>global</strong> which means it would be accessible from anywhere - which is generally not a best practice.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n  gubgub <span class=\"token operator\">=</span> <span class=\"token string\">'Ho!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Outputs \"ReferenceError: gobgob is not defined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Outputs \"Ho!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gubgub<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We don’t want our script variables override any other variables which would eventually exists!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n\n<span class=\"token comment\">// (…)</span>\n<span class=\"token comment\">// Somewhere else far far away in your JavaScript…</span>\n<span class=\"token comment\">// … a wild override of an existing (and forgetted) variable appears!</span>\n<span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Ho!'</span></code></pre></div>\n<h2 id=\"dont-forget-the-love-glove\"><a href=\"#dont-forget-the-love-glove\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don’t forget the love glove!</h2>\n<p>To resolve our problem, we just need to <strong>isolate variables</strong> so we limit their scope to the code we decided to.</p>\n<p>To do so, we wrap our JavaScript code into what we called an IIFE - or a <strong>self-executing anonymous function</strong> apparently - :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your JS code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This code encapsulation is:</p>\n<ul>\n<li><strong>anonymous</strong> because you don’t name the function</li>\n<li><strong>self-executing</strong> or immediately-invoked thanks to the final little <code class=\"language-text\">();</code></li>\n</ul>\n<p>Going back to our previous example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n\n<span class=\"token comment\">// We wrap our script properly</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Ho!'</span>\n\n  <span class=\"token comment\">// Outputs \"Ho!\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Outputs \"Hey!\" -> bingo !</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nothing is changed for script execution.</p>\n<p>But <strong>we don’t have to worry about other variables</strong> which could exist because we now work into a safe environment: we won’t modify a global variable inadvertently!</p>\n<p>However, we can still use global variables inside our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Outputs \"Hey!\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"rename-global-variables-in-our-script\"><a href=\"#rename-global-variables-in-our-script\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rename global variables in our script</h3>\n<p>It’s even possible to <strong>pass variables as parameters</strong> for your script. You can generally redefine them for your script usage, which is good if you’re working with some library such as <em>jQuery</em>.</p>\n<p>Imagine you’d like to create a tiny nice script using <em>jQuery</em>. You’d probably use <code class=\"language-text\">$</code> everywhere.</p>\n<p>What if I told you we’re now using another library which also uses <code class=\"language-text\">$</code> as an alias? You’d probably pass <em>jQuery</em> <a href=\"http://api.jquery.com/jQuery.noConflict/\">in <code class=\"language-text\">noConflict()</code> mode</a>… and you’ll have to change your script to replace <code class=\"language-text\">$</code> with <code class=\"language-text\">jQuery</code>.</p>\n<p>Or you’d have listen to me and these two lines of code would have properly isolate your script which would execute, regardless of your environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your JS script with a bunch of $</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The good part of this technique is that you could quickly switch library without changing anything in your script, which is more flexible and stable:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// your JS script with a bunch of $</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Zepto<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Performance note</strong> - When you minify your script, it’d minify your variables’ name without ruining your code, so it would make it even smaller as a result.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Example with minification for `window`</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs `true`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"tip-1-create-an-alias-for-undefined\"><a href=\"#tip-1-create-an-alias-for-undefined\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip 1: Create an alias for <code class=\"language-text\">undefined</code></h3>\n<p>One of JS best practice that <a href=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.js\"><em>jQuery</em> uses in its source code</a> is to declare a last parameter which is not defined and would be equal to <code class=\"language-text\">undefined</code> in your script:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create a gobgob variable which value is `undefined`</span>\n  <span class=\"token keyword\">var</span> gobgob\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs `true`</span>\n\n  <span class=\"token comment\">// Our last variable is an alias for `undefined`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"tip-2-still-access-to-variables-from-the-outside\"><a href=\"#tip-2-still-access-to-variables-from-the-outside\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip 2: Still access to variables, from the outside</h3>\n<p><em>Thanks <a href=\"https://twitter.com/fabien0102\">@fabien0102</a> for pointing this was missing.</em></p>\n<p>Isolate your code is good. But you’d sometimes need to develop a plugin/a library and you’d like to access the main object from the outside, so you can use it.</p>\n<p>There are a bunch of possibilities but here is, IMHO, the simplest one: you just need to attach your variable to <code class=\"language-text\">window</code> so it becomes global for the other scripts.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create a gobgob variable and attach it to window</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n  window<span class=\"token punctuation\">.</span>gobgob <span class=\"token operator\">=</span> gobgob\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Outputs \"Hey!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"final-words\"><a href=\"#final-words\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final words</h2>\n<p>This post is not a really new one and you can find a bunch of that kind all over the web. But it’s still a few reminder to start thinking about modular scripts which are components for bigger projects.</p>\n<p>Finally, the most we speak about that, the most developers are likely to use this best practice.</p>\n<p>As usual don’t hesitate to leave me comments, suggestions or even questions if you need to.</p>\n<p>Plop!</p>","fields":{"tagSlugs":["/tags/javascript/","/tags/jquery/"],"slug":"/en/2013/05/properly-isolate-variables-in-javascript/"},"timeToRead":5,"frontmatter":{"title":"Properly isolate your variables in JavaScript","tags":["javascript","jquery"],"date":"2013-05-19T00:00:00.000Z","description":"A story of immediately-invoked function expression (IIFE)… Know them, it could save your life!"}}},"pageContext":{"slug":"/en/2013/05/properly-isolate-variables-in-javascript/"}}