{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"disqusShortname":"nicoespeon","url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"e7da5d82-2c2a-5ee4-b6f8-ee3a12e0877e","html":"<p>Suppose following methods for the rest of the post:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, how are you?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Roses are red. Did you know that?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok bye!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"few-reminders-about-switch\"><a href=\"#few-reminders-about-switch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Few reminders about <code class=\"language-text\">switch</code></h2>\n<p><code class=\"language-text\">if / else</code> allow us to add some branching logic in our code: regarding a condition we’ll do this or that operation. But there are sometimes more than 2 possibles branches.</p>\n<p>As a beginner developer, you might be starting using <code class=\"language-text\">else if</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well, that’s a bit verbose, difficult to read and not that pretty. Here comes <code class=\"language-text\">switch</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">switch</code> is the classical alternative to a long chain of <code class=\"language-text\">else if</code>.</p>\n<p>Excepted for very short operations — few lines with clear intent — I prefer to encapsulate them in <strong>explicitly named</strong> functions to decompose the logic from the implementation details. The logic lies in the <code>switch</code>. I use the same technique for <code>if / else</code>.</p>\n<p>Syntax is clearer, but you’re introducing few subtleties.</p>\n<p>Most of all, you should be aware of the <code class=\"language-text\">break</code> concept here: it allows you to get out of the <code class=\"language-text\">switch</code> and prevent falling through the next <code class=\"language-text\">case</code>.</p>\n<h3 id=\"remember-errors-to-avoid\"><a href=\"#remember-errors-to-avoid\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remember errors to avoid!</h3>\n<p>When you deal with a <code class=\"language-text\">switch</code>, you’re not likely to expect falling through 2 different cases.</p>\n<p>Just like <code class=\"language-text\">else if</code>, you probably expect to execute one and only one case. That’s why you must take care <strong>not to forget the <code class=\"language-text\">break</code></strong>!</p>\n<p>Have a look at this code, is it intentional? Is it a mistake? Whatever, that’s a source of bugs and confusion!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There might exists a use case however, where the intent is clear and which is acceptable — and used.</p>\n<p>That’s when you want to regroup multiple inputs into the same <code class=\"language-text\">case</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To keep it short: to omit a <code class=\"language-text\">break</code> for each <code class=\"language-text\">case</code> is error-prone because you’re introducing obscure subtleties in your code. And your code is likely to get future developers into troubles.</p>\n<p>That’s why the wise advice is: avoid doing that, do remember the <code class=\"language-text\">break</code>.</p>\n<h2 id=\"an-object-oriented-alternative-method-lookup\"><a href=\"#an-object-oriented-alternative-method-lookup\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>An object-oriented alternative: method lookup</h2>\n<p>Let’s go back to our example with a less procedural spirit. Let’s get object-oriented:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> greetings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  patrick<span class=\"token punctuation\">:</span> sayHello<span class=\"token punctuation\">,</span>\n  john<span class=\"token punctuation\">:</span> giveSomeNews<span class=\"token punctuation\">,</span>\n  jane<span class=\"token punctuation\">:</span> giveSomeNews<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typeof</span> greetings<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> greetings<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can call that the <strong>method lookup</strong>, which reflect the idea behind the <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#commandpatternjavascript\">Command Pattern</a>.</p>\n<p>We use the natural object syntax of JavaScript and the power of its first-class functions. No <code class=\"language-text\">break</code> to deal with. We already get all the advantages of the object, as the capability to extend it with ease, allowing context-relative options.</p>\n<p>The method lookup is much more relevant than the switch if you’re in one of the following cases:</p>\n<ul>\n<li>will you need to add more cases later? <em>Dealing with plugins for instance.</em></li>\n<li>is it useful to change cases during run-time? <em>Like changing options regarding the context.</em></li>\n<li>is it useful to log executed cases? <em>To set up an undo / redo stack, a log system, etc.</em></li>\n<li>are you using incremental numbers to list your cases iteratively? <em>If you use <code class=\"language-text\">case 1:</code>, <code class=\"language-text\">case 2:</code>, etc.</em></li>\n<li>are you trying to fall through different cases by intentionally omitting some <code class=\"language-text\">break</code>? <em>Fall through = danger, method lookup is a much better alternative.</em></li>\n</ul>\n<h2 id=\"few-remarks-on-an-advanced-version-of-switch\"><a href=\"#few-remarks-on-an-advanced-version-of-switch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Few remarks on an “advanced” version of <code class=\"language-text\">switch</code></h2>\n<p>Using <code class=\"language-text\">switch</code>, you can directly test a condition in your <code class=\"language-text\">case</code>.</p>\n<p>Doing so, and considering this code exist:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPatrick</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'patrick'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isJane</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">/</span><span class=\"token operator\">^</span>jane<span class=\"token operator\">-</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, the following code will perfectly work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">isPatrick</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token function\">isJane</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, for more readability I exported conditions into functions that make the intent clear and produce a better code.</p>\n<p>You’ll agree that the logic is now a bit more complex. In such a context, it might be relevant to polish your work <strong>to make your code clear</strong>.</p>\n<p>This works and could be very useful. Plus, it doesn’t have any equivalent with the method lookup as far as I know.</p>\n<p>However, <strong>beware overlogic abuse in your code</strong>. The fact you can do it doesn’t imply that you should. Keep a critical mind over what you’re doing: is it really necessary or is there another simpler way? Can I work on a clearer design to express the logic intent?</p>\n<p>Sometimes you might go crazy into “sexy” stuff, but nothing values most than <strong>KISS</strong>!</p>\n<h2 id=\"release-the-object-oriented-kraken\"><a href=\"#release-the-object-oriented-kraken\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Release the (object-oriented) Kraken!</h2>\n<p>The <em>method lookup / command pattern</em> is a <code class=\"language-text\">switch</code> equivalent, with an object-oriented spirit. <strong>It tends to encourage you to write a flexible, well-organized, object-oriented code</strong> — which is good.</p>\n<p><code class=\"language-text\">switch … case</code> is not a bad thing in itself. But it can be lead to <em>spaghetti code</em> and be error-prone. Because its procedural, you may end up with a complex branching logic which finally traduce a bad code design which is difficult to maintain.</p>\n<p>Finally, there is no reason to actually use <code class=\"language-text\">switch</code> instead of its alternative if you want to benefit what JavaScript has to offer. But must of all, the most important is you to write a code the future-you and others won’t hate!</p>","fields":{"tagSlugs":["/tags/javascript/","/tags/oop/","/tags/switch/"],"slug":"/en/2015/01/oop-revisited-switch-in-js/"},"timeToRead":5,"frontmatter":{"title":"OOP - switch revisited in JavaScript","tags":["javascript","oop","switch"],"date":"2015-01-14T00:00:00.000Z","description":"With JavaScript you get a more object-oriented, less procedural and error-prone alternative to the good 'ol switch … case."}}},"pageContext":{"slug":"/en/2015/01/oop-revisited-switch-in-js/"}}