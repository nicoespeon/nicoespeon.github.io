{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about VS Code, web development and life in general.","fr":"J’écris à propos de VS Code, du développement web et de la vie en général."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"7e9ebde2-afcf-5c6f-a69c-c89b6283b547","html":"<h2 id=\"cest-quoi-ça-une-fonction-pure-\"><a href=\"#cest-quoi-%C3%A7a-une-fonction-pure-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C’est quoi ça une fonction “pure” ?</h2>\n<p>Une fonction pure <strong>ne dépend pas</strong> et <strong>ne modifie pas l’état de variables hors de sa portée</strong>.</p>\n<p>En pratique, cela signifie qu’<strong>une fonction pure retourne toujours le même résultat avec des paramètres identiques</strong>. Son exécution ne dépend pas de l’état du système.</p>\n<p>Les fonctions pures sont d’ailleurs un pilier de la <a href=\"http://fr.wikipedia.org/wiki/Programmation_fonctionnelle\">programmation fonctionnelle</a>.</p>\n<h3 id=\"quelques-exemples\"><a href=\"#quelques-exemples\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quelques exemples</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  items<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Désormais `values.a` vaut 3 car la fonction impure l'a modifié.</span></code></pre></div>\n<p>Ici, on modifie les attributs de l’objet passé en paramètre, donc on modifie l’objet en dehors de la portée de notre fonction également : elle est impure dans ce cas.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// `values.a` n'a pas été modifié, c'est toujours 1</span></code></pre></div>\n<p>Ici, on modifie simplement le paramètre dans la portée de la fonction, on ne touche à rien d’autre en dehors !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// En fait la valeur de `c` dépend de celle de `b`.</span>\n<span class=\"token comment\">// Dans une base de code plus grande vous risquez d'oublier ce</span>\n<span class=\"token comment\">// détail et le résultat peut vous surprendre car il peut varier</span>\n<span class=\"token comment\">// de manière implicite.</span></code></pre></div>\n<p>La variable <code class=\"language-text\">b</code> n’est pas dans la portée de la fonction. Le résultat dépendra du contexte : surprises garanties !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Ici il est clair que la valeur de `c` dépend de celle de `b`.</span>\n<span class=\"token comment\">// Pas de surprise en douce.</span></code></pre></div>\n<h2 id=\"et-en-pratique-ça-donne-quoi-\"><a href=\"#et-en-pratique-%C3%A7a-donne-quoi-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Et en pratique ça donne quoi ?</h2>\n<p>Considérons que ce code existe :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getMinQuantity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Une fonction pure qui retourne une valeur numérique</span>\n  <span class=\"token comment\">// en fonction du name.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Et prenons donc l’exemple du code suivant que l’on pourrait retrouver dans un projet lambda :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Un tas de code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      initialChildIndex<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't add quantity text!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> initialChildIndex <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>initialChildIndex <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setQuantityTextColor</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> initialChildIndex<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  setQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> minQuantity\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un tas de code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ici nous avons <code class=\"language-text\">addQuantityText()</code>, <code class=\"language-text\">formatQuantityText()</code> et <code class=\"language-text\">setQuantityTextColor()</code> qui sont toutes impures.</p>\n<p>Dans notre contexte, c’est <code class=\"language-text\">addQuantityText()</code> qui est utilisée lorsque l’on souhaite “afficher la quantité” dans notre <code class=\"language-text\">$$boxContainer</code>. C’est le point d’entrée qui se charge de tous les détails. C’est dans cette fonction qu’on va aller jeter un œil si un soucis se présente avec notre <code class=\"language-text\">$$quantity</code>. Ça risque de devenir un vrai jeu de piste.</p>\n<p>La manière dont il a été écrit peut être propice à certaines erreurs sur le long terme.</p>\n<h3 id=\"quand-ça-devient-compliqué\"><a href=\"#quand-%C3%A7a-devient-compliqu%C3%A9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quand ça devient compliqué</h3>\n<p>Dans l’exemple, l’ordre d’exécution des fonctions est garant du bon fonctionnement du code.</p>\n<p><strong>Il suffit d’échanger l’ordre de 2 lignes pour tout casser</strong>. Ça peut paraître évident, mais ça l’est beaucoup moins à repérer :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Un tas de code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      initialChildIndex<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't add quantity text!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> initialChildIndex <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>initialChildIndex <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setQuantityTextColor</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  setQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> minQuantity\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un tas de code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il y a désormais une erreur dans le code. Le problème, c’est que ça ne saute pas aux yeux !</p>\n<p>Ici, <code class=\"language-text\">setQuantityTextColor()</code> est responsable de la couleur de <code class=\"language-text\">$$quantity</code>. Du coup, il faut naviguer de méthodes en méthodes pour trouver celle qui modifie l’objet en dernier et reconstituer le flow pour comprendre ce qui pourrait mal se passer.</p>\n<p>À ce moment là, on pourrait presque s’en mordre les doigts d’avoir découpé <code class=\"language-text\">formatQuantityText()</code> en petites méthodes pour simplifier les détails de son implémentation.</p>\n<p>D’une manière générale d’ailleurs, ça fait pas mal de code à considérer en cas de debug. Et si on commence à estimer que décomposer une grosse méthode en petites complique la tâche de debug, alors le concept de <strong>fonction pure</strong> prend de l’intérêt.</p>\n<h3 id=\"avec-des-fonctions-pures\"><a href=\"#avec-des-fonctions-pures\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avec des fonctions pures</h3>\n<p>Reprenons notre code en utilisant cette fois un maximum de fonctions pures :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Un tas de code…</span>\n\n  <span class=\"token comment\">// L'ensemble des modifications de l'état du système sont</span>\n  <span class=\"token comment\">// concentrées ici.</span>\n  <span class=\"token comment\">// Seule cette méthode est responsable de l'insertion</span>\n  <span class=\"token comment\">// d'un élément, ce qui simplifie le debug et limite les</span>\n  <span class=\"token comment\">// effets de bord.</span>\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Cette fonction n'a pas d'effet de bord.</span>\n  <span class=\"token comment\">// Elle n'appelle que des fonctions pures. Elle crée et</span>\n  <span class=\"token comment\">// retourne l'objet canvas désiré, correctement configuré !</span>\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Cette méthode n'a plus d'effet de bord non plus,</span>\n  <span class=\"token comment\">// elle se charge de renvoyer la bonne couleur en fonction</span>\n  <span class=\"token comment\">// de la quantité en paramètre.</span>\n  getQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">&amp;&amp;</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    <span class=\"token keyword\">return</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un tas de code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il n’y a pas de changement fondamental dans cette nouvelle version du code. Et pourtant, les bénéfices ne sont pas négligeables.</p>\n<p>Ce qu’on a fait :</p>\n<ul>\n<li><code class=\"language-text\">getQuantityTextColor()</code> plutôt que <code class=\"language-text\">setQuantityTextColor()</code></li>\n<li>la méthode nous retourne une couleur en fonction de la quantité passée en paramètre au lieu de modifier l’objet qu’on lui passait en paramètre auparavant</li>\n<li>les méthodes ne dépendent plus de variables en dehors de leur portée</li>\n<li>les méthodes appellent uniquement des méthodes pures</li>\n<li>on isole la création / modification de l’objet <code class=\"language-text\">$$quantity</code> dans <code class=\"language-text\">formatQuantityText()</code></li>\n<li>on isole les modifications de l’état du système dans la seule méthode <code class=\"language-text\">addQuantityText()</code></li>\n</ul>\n<p>Ainsi, nous avons supprimé les méthodes qui avaient des effets de bords. Nous avons donc <strong>simplifié la maintenance du code</strong>. Si jamais il y a un soucis avec <code class=\"language-text\">$$quantity</code>, il n’y a qu’une méthode à regarder.</p>\n<h3 id=\"simplification-de-linterface\"><a href=\"#simplification-de-linterface\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplification de l’interface</h3>\n<p>Nous utilisons ici des méthodes publiques. Il serait tout à fait envisageable, voire carrément pertinent, de les rendre privées.</p>\n<p>En effet, elles n’ont pas grand chose à faire dans notre API car <strong>leur rôle est de simplifier l’interface</strong>. Allez jeter un œil à mon article sur <a href=\"/fr/2014/12/fonctions-privees-backbonejs\">les fonctions privées avec Backbone.js</a> si ça vous laisse perplexe.</p>\n<p>Comme elles sont pures, les extraire est un jeu d’enfant puisqu’elles ne dépendent d’aucun contexte mais simplement des paramètres !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">&amp;&amp;</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n  <span class=\"token keyword\">return</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n  <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n  $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n  $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n  $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> $$quantity\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Et du coup, plus loin dans le code :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Un tas de code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Un tas de code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"lintérêt-des-fonctions-pures\"><a href=\"#lint%C3%A9r%C3%AAt-des-fonctions-pures\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L’intérêt des fonctions pures</h2>\n<p>L’avantage d’une fonction pure, c’est qu’<strong>elle n’a pas d’effets de bord</strong>. Elles ne modifient pas l’état du système en dehors de leur portée. Ainsi, elles simplifient et clarifient le code : quand on appelle une fonction pure, on peut se concentrer sur la valeur qu’elle retourne puisqu’on sait qu’elle ne va pas impacter le système en passant.</p>\n<p>Une fonction pure est également robuste. <strong>Son ordre d’exécution n’a pas d’impact sur le système</strong>. Les opérations sur des fonctions pures sont donc parallélisables.</p>\n<p>De même, <strong>il est très simple de tester une fonction pure</strong> puisqu’il n’y a pas de contexte considérer. Il suffit de se concentrer sur les entrées / sorties.</p>\n<p>Enfin, maximiser le nombre de fonctions pures <strong>rend le code plus simple, plus flexible</strong>.</p>\n<h2 id=\"une-question-de-design\"><a href=\"#une-question-de-design\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Une question de design</h2>\n<p>En pratique quand on fait de l’orienté-objet, on se dit que les concepts de la programmation fonctionnelle paraissent inadaptés. C’est une erreur car <a href=\"http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html\">POO et FP sont parfaitement compatibles</a> !</p>\n<p>En effet, l’idée ici est toute simple : <strong>simplifier le code en limitant le nombre de fonctions qui ont un impact sur l’état du système</strong>.</p>\n<p>En s’efforçant à écrire un maximum de fonctions pures, en limitant le nombre de fonctions qui ne le sont pas, on se simplifie la vie !</p>\n<p>En tout cas, c’est l’idée. Et souvent, en pratique, c’est surtout une question de design, de choix entre un <code class=\"language-text\">get</code> et un <code class=\"language-text\">set</code> par exemple.</p>","fields":{"tagSlugs":["/fr/tags/javascript/","/fr/tags/programmation-fonctionnelle/"],"slug":"/fr/2015/01/fonctions-pures-javascript/"},"timeToRead":8,"frontmatter":{"title":"Fonctions pures en JavaScript","tags":["javascript","programmation fonctionnelle"],"date":"2015-01-25T00:00:00.000Z","description":"Qu'est-ce-qu'une fonction pure et pourquoi s'y intéresser en JavaScript ?"}}},"pageContext":{"slug":"/fr/2015/01/fonctions-pures-javascript/"}}