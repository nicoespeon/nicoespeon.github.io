{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"disqusShortname":"nicoespeon","url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"e9d2a8b7-95fb-5ec5-9c28-666c0a843a1a","html":"<h2 id=\"contexte\"><a href=\"#contexte\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contexte</h2>\n<p>Ceci est un talk que j’ai présenté le 10 novembre 2015 au <a href=\"http://www.meetup.com/fr/backbone-paris/events/226050848/\">meetup Backbone.js Paris S02E01</a>.</p>\n<h2 id=\"vidéo\"><a href=\"#vid%C3%A9o\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vidéo</h2>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/0VHW_7PyjBw?rel=0&amp;t=28m20s\" frameborder=\"0\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<h2 id=\"slides\"><a href=\"#slides\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slides</h2>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 72.91666666666666%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://slides.com/nicoespeon/tester-behaviors-marionette/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<h2 id=\"concrètement\"><a href=\"#concr%C3%A8tement\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concrètement</h2>\n<h3 id=\"les-problématiques\"><a href=\"#les-probl%C3%A9matiques\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les problématiques</h3>\n<p>Lorsqu’on se dit qu’on va tester notre Behavior, la première problématique que l’on rencontre est généralement la suivante :</p>\n<blockquote>\n<p>Mince, comment je fais pour instancier ma Behavior pour pouvoir tester son API ?</p>\n</blockquote>\n<p>En fait, <em>l’API d’une Behavior</em> ce ne sont pas particulièrement les méthodes publiques qu’on y déclare. Celles-ci ne seront jamais appellées directement :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Alert <span class=\"token operator\">=</span> Marionette<span class=\"token punctuation\">.</span>Behavior<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  defaults<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Alert!'</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Not really urgent'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    click<span class=\"token punctuation\">:</span> <span class=\"token string\">'emitAlert'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">emitAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should emit an alert'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// => This won't work</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>Behavior<span class=\"token punctuation\">.</span><span class=\"token function\">emitAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEmitAnAlert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Une Behavior <a href=\"http://slides.com/stephanebachelier/marionettebehaviors#/10\">réagit à des événements</a> (interactions DOM, trigger de la vue, etc.).</p>\n<p>Pour tester une Behavior, il faut donc <strong>déclencher ces événements</strong> puis <strong>observer l’impact de la Behavior sur le système</strong> pour voir si celle-ci a réagit correctement. Les Behaviors fonctionnant par effets de bord, c’est bel et bien ce qu’il faut tester.</p>\n<p>Une Behavior est déclarée et instanciée dans le contexte d’une vue :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ShareView <span class=\"token operator\">=</span> Marionette<span class=\"token punctuation\">.</span>ItemView<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#card'</span><span class=\"token punctuation\">,</span>\n\n  behaviors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    AlertOnShare<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      behaviorClass<span class=\"token punctuation\">:</span> AlertBehavior<span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Shared'</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Your message has been shared!'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pour tester une Behavior, il faut donc commencer par <strong>instancier une vue</strong> dans laquelle celle-ci est déclarée.</p>\n<blockquote>\n<p>OK ! Donc je vais mock une vue en y déclarant ma Behavior pour pouvoir la tester.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Alert Behavior'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> view\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    view <span class=\"token operator\">=</span> Marionette<span class=\"token punctuation\">.</span>ItemView<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      template<span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n      behaviors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        Alert<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          behaviorClass<span class=\"token punctuation\">:</span> AlertBehavior<span class=\"token punctuation\">,</span>\n          title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Title'</span><span class=\"token punctuation\">,</span>\n          message<span class=\"token punctuation\">:</span> <span class=\"token string\">'My message.'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>C’est une possibilité.</p>\n<p>Cependant, je n’ai pas vraiment le comportement de la Behavior dans le <strong>contexte</strong> des vues de mon application. Ce n’est pas nécessairement grave puisque nous parlons de tests unitaires. Simplement, cela demande beaucoup de cérémonie pour mock tout ce qu’il faut :</p>\n<ul>\n<li>mock une vue avec les paramètres par défaut</li>\n<li>mock une vue avec des paramètres configurés</li>\n<li>mock tout ce qui doit être testé (template, events, triggers…)</li>\n</ul>\n<p>Une autre solution consiste à <strong>tester la Behavior instanciée dans chacunes des vues de notre application</strong>, directement dans les tests de celles-ci en fait.</p>\n<blockquote>\n<p>OK ! Je vais tester la Behavior dans chacune de mes vues… Mais, mais… Et la duplication ?!</p>\n</blockquote>\n<p>Effectivement, si on commence par tester le comportement de nos Behaviors dans le contexte de chacune de nos vues, on se retrouve à dupliquer les tests. Sachant que le principe de la Behavior c’est d’isoler un ensemble de comportements de vue pour ne pas avoir à le dupliquer, c’est un peu dommage de perdre ça côté tests.</p>\n<h3 id=\"comment-on-sen-sort-\"><a href=\"#comment-on-sen-sort-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment on s’en sort ?</h3>\n<p><i class=\"icon-github\"></i> <a href=\"https://github.com/nicoespeon/testing-marionette-behaviors\">Dépôt GitHub pour illustrer la solution proposée</a></p>\n<p>L’idée consiste à refactor les tests d’une Behavior dans une fonction qui prend un <code class=\"language-text\">context</code> en paramètre.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addOnClickTests</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> model<span class=\"token punctuation\">,</span> view\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">context<span class=\"token punctuation\">.</span>ModelClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">context<span class=\"token punctuation\">.</span>ViewClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> model<span class=\"token punctuation\">:</span> model <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should increase the model size by 1 when we click on the view'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    view<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cette <em>factory</em> embarque les tests de la Behavior et les déroule dans un contexte particulier.</p>\n<p>Ceci nous permet de l’instancier dans le contexte de notre vue, avec les paramètres qui vont bien :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Like View'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> View <span class=\"token operator\">=</span> LikeView<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> template<span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AddOnClick Behavior'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addOnClickTests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ViewClass<span class=\"token punctuation\">:</span> View<span class=\"token punctuation\">,</span> ModelClass<span class=\"token punctuation\">:</span> LikeModel <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>Oui, mais ici tu testes les paramètres par défaut de la Behavior : « increase the model size by 1 ». Comment tester des paramètres en particulier ? On les passe dans le contexte ? Du coup, on fait à nouveau de la duplication, autant mock la vue complètement.</p>\n</blockquote>\n<p>C’est effectivement la raison pour laquelle Marionette expose publiquement un tableau des Behaviors instanciées d’une vue dans son attribut <code class=\"language-text\">_behaviors</code> <a href=\"https://github.com/marionettejs/backbone.marionette/blob/2f3fcebc26aa6f0b1310ed077278c17f3b22aac0/src/marionette.view.js#L17\">depuis la v2.2.0</a>.</p>\n<p>L’astuce consiste donc à retrouver l’instance de la Behavior dans le contexte de la vue afin de pouvoir variabiliser les tests en fonction des paramètres avec lesquels la Behavior a été instanciée.</p>\n<p>Pour cela, je déclare un <code class=\"language-text\">id</code> à mes Behaviors afin de pouvoir les retrouver facilement :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> OnClick <span class=\"token operator\">=</span> Marionette<span class=\"token punctuation\">.</span>Behavior<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token string\">'addOnClick'</span><span class=\"token punctuation\">,</span>\n\n  defaults<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    propertyToIncrease<span class=\"token punctuation\">:</span> <span class=\"token string\">'size'</span><span class=\"token punctuation\">,</span>\n    increaseStep<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    click<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// increase `propertyToIncrease` by `increaseStep`</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addOnClickTests</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> model<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> behavior<span class=\"token punctuation\">,</span> options\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">context<span class=\"token punctuation\">.</span>ModelClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">context<span class=\"token punctuation\">.</span>ViewClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> model<span class=\"token punctuation\">:</span> model <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Retrieve instantiated behavior and its actual options under this context.</span>\n    behavior <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">findWhere</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>_behaviors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'addOnClick'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    options <span class=\"token operator\">=</span> behavior<span class=\"token punctuation\">.</span>options\n\n    model<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>propertyToIncrease<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be instantiated'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>behavior<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeUndefined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should increase the model value when we click on the view'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> expectedValue <span class=\"token operator\">=</span>\n      model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>propertyToIncrease<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> options<span class=\"token punctuation\">.</span>increaseStep\n\n    view<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>propertyToIncrease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>expectedValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"pour-résumer\"><a href=\"#pour-r%C3%A9sumer\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pour résumer</h3>\n<ul>\n<li>on teste l’API de la Behavior = son impact sur le système en réaction à des événements</li>\n<li>on décrit nos tests de Behavior dans une factory qui prend un contexte en paramètre</li>\n<li>on embarque nos tests dans chacune de nos vues en y passant le bon contexte</li>\n<li>on utilise <code class=\"language-text\">this.view._behaviors</code> pour retrouver la Behavior (avec un <code class=\"language-text\">id</code> par exemple) et ses paramètres d’instanciation dans le contexte de la vue</li>\n</ul>","fields":{"tagSlugs":["/fr/tags/javascript/","/fr/tags/backbone-js/","/fr/tags/marionette/","/fr/tags/behaviors/","/fr/tags/tests/"],"slug":"/fr/2015/11/tester-behaviors-marionette/"},"timeToRead":5,"frontmatter":{"title":"Tester ses Behaviors Marionette.js","tags":["javascript","backbone.js","marionette","behaviors","tests"],"date":"2015-11-23T00:00:00.000Z","description":"Comment tester unitairement, et simplement, ses Behaviors Marionette.js."}}},"pageContext":{"slug":"/fr/2015/11/tester-behaviors-marionette/"}}