{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"disqusShortname":"nicoespeon","url":"http://www.nicoespeon.com"}},"markdownRemark":{"id":"2db4be6c-8e9d-5f1c-9125-db6b16f2debc","html":"<h2 id=\"vidéo--slides\"><a href=\"#vid%C3%A9o--slides\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vidéo &#x26; Slides</h2>\n<p>J’ai présenté ce talk le 21 décembre 2015 au <a href=\"http://www.meetup.com/fr-FR/Nodejs-Paris/events/227335326/\">meetup Node.js Paris Chapitre 3 / Conférence 2</a>.</p>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/1GyoY6V-0ss?rel=0\" frameborder=\"0\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 72.91666666666666%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"http://slides.com/nicoespeon/plop-alternative-yeoman/embed\" scrolling=\"no\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<h2 id=\"kezako-plop-\"><a href=\"#kezako-plop-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kezako plop ?</h2>\n<p><a href=\"https://github.com/amwmedia/plop\">Plop</a> c’est un petit paquet node qui permet de se simplifier la vie quand on veut créer un nouveau controller / router / helper / …</p>\n<blockquote>\n<p>Bah créer un nouveau controller c’est facile : je copie-colle le code d’un autre controller et je supprime les lignes dont je ne me sers pas. Tadaaa !</p>\n</blockquote>\n<p>Certes, mais viennent un certain nombre de questions légitimes :</p>\n<ul>\n<li>Quel “autre” controller ? Le plus récent ? Le “mieux” codé ? Y a-t-il un controller de référence ?</li>\n<li>Si je ne suis pas (encore) un expert du projet en question, comment répondre au point précédent ?</li>\n<li>Comment m’assurer que je ne me trompe pas en nommant le nouveau fichier ? En supprimant les lignes qui sont “inutiles”, selon moi ?</li>\n<li>Est-ce-que je dois déclarer ce nouveau controller quelque part dans un fichier existant ? Lequel ? Comment ?</li>\n</ul>\n<p>Trouver un bon fichier, l’ouvrir, copier son contenu, créer un nouveau fichier, coller le contenu, supprimer les lignes inutiles… C’est répétitif, propice aux erreurs et ça n’a pas beaucoup de valeur ajoutée. En plus, ça peut prendre un peu de temps. Surtout, c’est fréquent !</p>\n<p>Ce serait vachement mieux à la place d’écrire <code class=\"language-text\">plop</code> dans son terminal, répondre à 2 questions et BIM, c’est fait !</p>\n<figure>\n  <img src=\"/plop-behavior-62658fd875867f5e906af0d0cae2be0a.gif\" alt=\"Comportement de Plop\">\n  <figcaption>Simple et efficace. Toujours tent&#xE9;(e) par l&apos;option copier-coller&#xA0;?</figcaption>\n</figure>\n<p>C’est exactement ce que nous allons voir ici.</p>\n<h2 id=\"setup\"><a href=\"#setup\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<h3 id=\"installation\"><a href=\"#installation\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h3>\n<p>Plop étant un paquet node, <code class=\"language-text\">npm install -g plop</code> et vous pouvez commencer à jouer.</p>\n<p>On peut aussi l’installer localement sur le projet en le rajoutant aux dépendances : <code class=\"language-text\">npm install --save-dev plop</code>.</p>\n<p>Puis ajoutez-le aux scripts de votre <code class=\"language-text\">package.json</code> pour pouvoir le lancer avec <code class=\"language-text\">npm run plop</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your-awesome-project\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome project, isn't it?\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"plop\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voilà !</p>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration</h3>\n<p>Plop se base sur un <code class=\"language-text\">plopfile.js</code>.</p>\n<p>C’est le fichier de configuration standard, que je vous suggère de placer à la racine du projet :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// C'est ici qu'on va configurer nos générateurs</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Plop va également se baser sur des templates qui peuvent soit être inlined dans le fichier de configuration, soit placés dans des fichiers séparés. Je vous suggère de les placer dans un dossier <code class=\"language-text\">plop-templates/</code>, à la racine du projet également.</p>\n<h3 id=\"all-inclusive-ftw\"><a href=\"#all-inclusive-ftw\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>All inclusive FTW</h3>\n<p>Comme vous l’aurez compris : le générateur et les templates sont embarqués dans le projet, à l’instar des tests ou du task runner (brunch, gulp, grunt…).</p>\n<p>Cela a <strong>des avantages considérables</strong> sur un <a href=\"http://yeoman.io/authoring/\">générateur Yeoman personnalisé</a> :</p>\n<ul>\n<li>un seul dépôt à maintenir</li>\n<li>tout est déjà embarqué dans le projet, nul besoin d’installer yeoman et ledit générateur pour pouvoir s’en servir</li>\n<li>mettre à jour un template est trivial, pas besoin de publier une nouvelle version du générateur et s’assurer que tout est à jour avant de l’utiliser</li>\n</ul>\n<p>Finalement, là où un développer un générateur Yeoman spécifique au projet est overkill, plop est parfaitement adapté. Léger, près du code source, il sera <strong>plus facilement adopté</strong>, maintenu et, en fin de compte, <strong>utilisé</strong>.</p>\n<h2 id=\"notre-premier-générateur\"><a href=\"#notre-premier-g%C3%A9n%C3%A9rateur\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notre premier générateur</h2>\n<p>Pour déclarer un générateur, <code class=\"language-text\">plop</code> nous fournit la méthode <code class=\"language-text\">setGenerator</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// On déclare un nouveau générateur appelé \"module\"</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Décrit succintement ce que fait le générateur</span>\n    <span class=\"token comment\">// pour s'y retrouver.</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">'Create a new module'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Récupère les inputs de l'utilisateur.</span>\n    <span class=\"token comment\">// C'est Inquirer.js qui fait le job ici.</span>\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is your module name?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Liste des actions à faire.</span>\n    <span class=\"token comment\">// Ici, on \"add\" de nouveaux fichiers à partir</span>\n    <span class=\"token comment\">// de nos templates.</span>\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.tests.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.tests.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"prompts\"><a href=\"#prompts\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prompts</h3>\n<p>La partie <code class=\"language-text\">prompts</code> est directement déléguée à <a href=\"https://github.com/SBoudrias/Inquirer.js/\">Inquirer.js</a>.</p>\n<p>Vous pouvez donc vous référez à <a href=\"https://github.com/SBoudrias/Inquirer.js/#objects\">leur documentation</a> pour découvrir tout ce que vous pouvez faire (type des questions, filtre d’output, validation d’input…).</p>\n<p>On peut ainsi imaginer des choses un peu plus complexes :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> trimRight<span class=\"token punctuation\">,</span> isEmpty <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ensurePlural</span> <span class=\"token operator\">=</span> text <span class=\"token operator\">=></span> <span class=\"token function\">trimRight</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'s'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotEmptyFor</span> <span class=\"token operator\">=</span> name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' is required'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is your module name?'</span><span class=\"token punctuation\">,</span>\n        validate<span class=\"token punctuation\">:</span> <span class=\"token function\">isNotEmptyFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filter<span class=\"token punctuation\">:</span> ensurePlural<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">validate</code> va s’assurer que le nom donné pour le module n’est pas vide.</p>\n<p><code class=\"language-text\">filter</code> me permet de formaliser l’output : tous les noms des modules doivent se terminer par un <code class=\"language-text\">s</code>. Ainsi, si par inadvertance je nomme mon module <code class=\"language-text\">calendar</code>, je suis assuré que la variable <code class=\"language-text\">name</code> vaudra <code class=\"language-text\">calendars</code> pour la suite.</p>\n<h3 id=\"actions\"><a href=\"#actions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h3>\n<p>Une fois qu’il sait tout, plop va réaliser l’ensemble des <code class=\"language-text\">actions</code> qu’on lui demande. Il dispose à ce moment là des variables que lui fournit inquirer.</p>\n<p>Les actions, comme les templates, sont parsées avec <a href=\"https://github.com/wycats/handlebars.js/\">Handlebars</a>. Si vous avez compris son fonctionnement, vous savez déjà utiliser plop.</p>\n<p>Ainsi <code class=\"language-text\">{{name}}</code> correspond à la réponse donnée au prompt, validée et filtrée au préalable. Il me suffit de la placer où bon me semble, dans le chemin du fichier créé et/ou son template.</p>\n<p>Il faut savoir qu’il y a 2 types d’actions supportés pour le moment :</p>\n<ul>\n<li><code class=\"language-text\">&quot;add&quot;</code> qui va créer un nouveau fichier au niveau du <code class=\"language-text\">path</code> indiqué (relatif à <code class=\"language-text\">plopfile.js</code>)</li>\n<li><code class=\"language-text\">&quot;modify&quot;</code> qui va modifier le fichier situé au niveau du <code class=\"language-text\">path</code>. Il va remplacer la RegExp définie dans <code class=\"language-text\">pattern</code> par le template</li>\n</ul>\n<p>Pour les 2 actions on peut soit utiliser un template inline via <code class=\"language-text\">template</code>, soit spécifier le chemin du template à utiliser via <code class=\"language-text\">templateFile</code>.</p>\n<h4 id=\"un-exemple-concret\"><a href=\"#un-exemple-concret\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Un exemple concret</h4>\n<p>Ça peut donner quelque chose du genre :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> modulePath <span class=\"token operator\">=</span> <span class=\"token string\">'app/modules/{{camelCase name}}.js'</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// Ajoute un nouveau model + boilerplate de tests.</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.model.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.model.tests.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.tests.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// Modifie le module pour y injecter le model créé.</span>\n      <span class=\"token comment\">// Tout fonctionne avec un replace de RegExp.</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'modify'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> modulePath<span class=\"token punctuation\">,</span>\n        pattern<span class=\"token punctuation\">:</span> <span class=\"token regex\">/(\\/\\/ IMPORT MODULE FILES)/g</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">'$1\\nimport Model from \"./{{camelCase name}}.model\";'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'modify'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> modulePath<span class=\"token punctuation\">,</span>\n        pattern<span class=\"token punctuation\">:</span> <span class=\"token regex\">/(const namespace = \"\\w+\";)/g</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">'$1\\n\\nModel = Model.extend( { namespace: namespace } );'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>À partir du template <code class=\"language-text\">plop-templates/model.js</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * TODO - Describe what your model does.\n *\n * @class {{pascalCase name}}.Model\n * @module {{pascalCase name}}\n * @constructor\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Executed on model initialization</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si <code class=\"language-text\">{{name}}</code> vaut <code class=\"language-text\">calendars</code>, alors plop va créer le fichier <code class=\"language-text\">app/modules/calendars.model.js</code> suivant :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * TODO - Describe what your model does.\n *\n * @class Calendars.Model\n * @module Calendars\n * @constructor\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Executed on model initialization</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Et va transformer notre <code class=\"language-text\">app/modules/calendars.js</code> actuel :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'core/module'</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token comment\">// IMPORT MODULE FILES</span>\n\n<span class=\"token keyword\">const</span> namespace <span class=\"token operator\">=</span> <span class=\"token string\">'calendars'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isDisplayed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when module is considered as ready</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pour y insérer le model créé :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'core/module'</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token comment\">// IMPORT MODULE FILES</span>\n<span class=\"token keyword\">import</span> Model <span class=\"token keyword\">from</span> <span class=\"token string\">'./calendars.model'</span>\n\n<span class=\"token keyword\">const</span> namespace <span class=\"token operator\">=</span> <span class=\"token string\">'calendars'</span>\n\nModel <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> namespace<span class=\"token punctuation\">:</span> namespace <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isDisplayed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when module is considered as ready</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Avec <code class=\"language-text\">&quot;add&quot;</code> et <code class=\"language-text\">&quot;modify&quot;</code> il est possible de faire un paquet de petites choses répétitives plus simplement.</p>\n<h4 id=\"adapter-les-actions-en-fonction-des-réponses-données\"><a href=\"#adapter-les-actions-en-fonction-des-r%C3%A9ponses-donn%C3%A9es\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adapter les actions en fonction des réponses données</h4>\n<p><a href=\"https://github.com/amwmedia/plop/pull/1\">Vous pouvez également passer une fonction à <code class=\"language-text\">actions</code></a>. Cette fonction prend en paramètre les réponses de l’utilisateur et doit retourner le tableau des actions à effectuer.</p>\n<p>L’intérêt c’est de pouvoir <strong>adapter les actions en fonction des réponses données</strong>.</p>\n<p>Prenons l’exemple de la création d’un nouveau module :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is the name of your module?'</span><span class=\"token punctuation\">,</span>\n        validate<span class=\"token punctuation\">:</span> <span class=\"token function\">isNotEmptyFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filter<span class=\"token punctuation\">:</span> ensurePlural<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'dataConfig'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tell me about the data, what do you need?'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n        choices<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Nothing'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'A Model'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'model'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    actions<span class=\"token punctuation\">:</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Ajoute un nouveau module quoiqu'il en soit.</span>\n      <span class=\"token keyword\">let</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}/{{camelCase name}}.js'</span><span class=\"token punctuation\">,</span>\n          templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token punctuation\">:</span>\n            <span class=\"token string\">'app/modules/{{camelCase name}}/tests/{{camelCase name}}.tests.js'</span><span class=\"token punctuation\">,</span>\n          templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.tests.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n\n      <span class=\"token comment\">// Si l'on souhaite un modèle, alors on en ajoute un</span>\n      <span class=\"token comment\">// dans la foulée.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dataConfig <span class=\"token operator\">===</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        actions <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.model.js'</span><span class=\"token punctuation\">,</span>\n            templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.js'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.model.tests.js'</span><span class=\"token punctuation\">,</span>\n            templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.tests.js'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Retourne le tableau des actions à réaliser.</span>\n      <span class=\"token keyword\">return</span> actions\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le générateur peut donc s’adapter aux réponses que l’on donne et prendre en compte un certain nombre de scénarios (un module avec un Model, une Collection + Model, avec une CollectionView ou bien une CompositeView…).</p>\n<h3 id=\"helpers\"><a href=\"#helpers\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helpers</h3>\n<p>Un petit point sur les helpers de templating de plop : ce sont <a href=\"http://handlebarsjs.com/expressions.html#helpers\">ceux de Handlebars</a>.</p>\n<p>Il y a déjà un certain nombre de <a href=\"https://github.com/amwmedia/plop#baked-in-helpers\">helpers fournis par plop</a>. <code class=\"language-text\">camelCase</code>, par exemple, fonctionne ainsi : <code class=\"language-text\">{{camelCase name}}</code> avec <code class=\"language-text\">name = &quot;my awesome module&quot;</code> donne <code class=\"language-text\">&quot;myAwesomeModule&quot;</code>.</p>\n<p>Vous pouvez définir vos propres helpers dans le <code class=\"language-text\">plopfile.js</code> avec <code class=\"language-text\">addHelper</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">addHelper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'upperCase'</span><span class=\"token punctuation\">,</span> text <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On vient de créer un helper <code class=\"language-text\">upperCase</code> que l’on pourra utiliser dans les <code class=\"language-text\">actions</code> et les templates : <code class=\"language-text\">{{upperCase name}}</code>.</p>\n<h3 id=\"just-use-it\"><a href=\"#just-use-it\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Just use it</h3>\n<p>Et c’est tout, il ne reste plus qu’à lancer <code class=\"language-text\">npm run plop</code> (ou <code class=\"language-text\">plop</code>, si vous l’avez installé globalement) et se laisser guider.</p>\n<p>On peut aussi directement appeler un générateur avec <code class=\"language-text\">npm run plop [generatorName]</code>.</p>\n<p>À l’usage plop est rapide et efficace tout comme Yeoman. Par contre, il est bien plus léger et simple à maintenir.</p>\n<h2 id=\"retour-dexpérience-en-production\"><a href=\"#retour-dexp%C3%A9rience-en-production\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retour d’expérience en production</h2>\n<p>À l’heure actuelle, j’utilise plop avec mon équipe sur le projet <a href=\"http://vinoga.com\">Vinoga</a>. Ses fonctionnalités conviennent parfaitement à nos use cases.</p>\n<p>J’avais développé un générateur Yeoman auparavant, largement inutilisé par l’équipe en pratique.</p>\n<p>Vraiment, plop est le genre d’outil qui nous fait gagner 10 minutes par-ci par-là au quotidien. Et lancer <code class=\"language-text\">plop module</code> dans sa console, c’est plutôt cool \\o/</p>","fields":{"tagSlugs":["/fr/tags/plop/","/fr/tags/yeoman/","/fr/tags/generateur/","/fr/tags/node-js/","/fr/tags/talk/"]},"frontmatter":{"title":"Plop — un micro-générateur pour se simplifier la vie au quotidien","tags":["plop","yeoman","générateur","node.js","talk"],"date":"2015-11-26T00:00:00.000Z","description":"Découvrez plop, un petit paquet node qui permet de bootstrap rapidement de nouveaux fichiers."}}},"pageContext":{"slug":"/fr/2015/11/plop-micro-generator-boilerplate-alternative-yeoman/"}}