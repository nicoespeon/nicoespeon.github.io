{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"disqusShortname":null,"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"204e08f0-52d4-5f5d-9af8-513fe98301ca","html":"<p>Supposons que les méthodes suivantes existent :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, how are you?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Roses are red. Did you know that?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok bye!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"quelques-rappels-sur-le-switch\"><a href=\"#quelques-rappels-sur-le-switch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quelques rappels sur le <code class=\"language-text\">switch</code></h2>\n<p><code class=\"language-text\">if / else</code> permet d’introduire de la logique dans notre code en créant des branches : en fonction d’une condition, nous exécuterons telle ou telle opération. Mais parfois, il y a plus de 2 branches possibles.</p>\n<p>Le réflexe initial consiste donc à ajouter des branches avec <code class=\"language-text\">else if</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Comme c’est un petit peu verbeux, peu lisible et encore moins élégant, on utilise alors le <code class=\"language-text\">switch</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">switch</code> est une alternative classique à un enchaînement de <code class=\"language-text\">else if</code>.</p>\n<p>À moins qu’il s’agisse d’opérations très petites (quelques lignes, claires et explicites), je préfère les encapsuler dans des fonctions <strong>explicitement nommées</strong> pour décomposer la logique de l’implémentation. Le <code>switch</code>, c’est la logique. J’utilise la même technique pour les <code>if / else</code>.</p>\n<p>La syntaxe est plus claire, mais on introduit certaines subtilités.</p>\n<p>Notamment, il faut prendre garde au concept du <code class=\"language-text\">break</code> introduit ici : il permet de sortir du <code class=\"language-text\">switch</code> et éviter de passer au <code class=\"language-text\">case</code> suivant.</p>\n<h3 id=\"rappel-des-erreurs-à-éviter-\"><a href=\"#rappel-des-erreurs-%C3%A0-%C3%A9viter-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rappel des erreurs à éviter !</h3>\n<p>Lorsque l’on arrive sur un <code class=\"language-text\">switch</code>, on s’attend rarement (jamais ?) à passer à travers 2 cas différents.</p>\n<p>À l’instar du <code class=\"language-text\">else if</code>, on s’attend à exécuter un cas et un seul. Pour cette raison, on veille à <strong>ne pas oublier le <code class=\"language-text\">break</code></strong> !</p>\n<p>Par exemple, ce code est-il intentionnel ? Est-ce un oubli ? En tout cas, c’est une source de confusion et de bugs !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Il existe un cas de figure où, à la limite, l’intention reste claire et qui est acceptable (et utilisée).</p>\n<p>Il s’agit de regrouper différents inputs dans un même <code class=\"language-text\">case</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'patrick'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'jane'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bref, ne pas mettre un <code class=\"language-text\">break</code> à chaque <code class=\"language-text\">case</code> est très souvent propice aux erreurs car le code écrit comporte “une subtilité”, il a donc des chances d’être mal lu / interprété.</p>\n<p>Le jeu n’en vaut pas la chandelle, aussi je vous conseille plutôt de ne pas le faire. Après, c’est vous qui voyez mais y’en a qu’on essayé…</p>\n<h2 id=\"une-alternative-orientée-objet--method-lookup\"><a href=\"#une-alternative-orient%C3%A9e-objet--method-lookup\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Une alternative orientée objet : method lookup</h2>\n<p>Reprenons à présent notre exemple avec un esprit moins procédural, plus orienté-objet :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> greetings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  patrick<span class=\"token punctuation\">:</span> sayHello<span class=\"token punctuation\">,</span>\n  john<span class=\"token punctuation\">:</span> giveSomeNews<span class=\"token punctuation\">,</span>\n  jane<span class=\"token punctuation\">:</span> giveSomeNews<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typeof</span> greetings<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> greetings<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>On peut appeler cela le <strong>method lookup</strong> qui traduit finalement l’idée du <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#commandpatternjavascript\">Command Pattern</a>.</p>\n<p>On utilise ici la syntaxe objet naturelle de JavaScript et la puissance de ses fonctions. Pas de <code class=\"language-text\">break</code> dont on doit se préoccuper. On dispose également de tous les avantages de l’objet, notamment le fait de pouvoir le surcharger facilement et ainsi dépendre d’un contexte particulier.</p>\n<p>En pratique, le method lookup est pertinent par rapport au switch si vous vous trouvez dans l’un des cas suivants :</p>\n<ul>\n<li>aurez-vous besoin d’ajouter plus de cas ? <em>Par exemple dans le cas de plugins</em></li>\n<li>est-il utile de pouvoir modifier les cas en cours d’exécution ? <em>Par exemple pour changer d’options en fonction du contexte.</em></li>\n<li>est-il utile de log les cas qui ont été exécutés ? <em>Par exemple pour mettre en place un stack de undo / redo, ou un système de log.</em></li>\n<li>êtes-vous en train d’utiliser des nombres pour lister vos cas, de manière itérative ? <em>Par exemple <code class=\"language-text\">case 1:</code>, <code class=\"language-text\">case 2:</code>, etc.</em></li>\n<li>êtes-vous en train d’essayer de regrouper des cas ensembles en omettant de manière intentionnelle des <code class=\"language-text\">break</code> ? <em>Fall through = danger, le method lookup est bien plus clair.</em></li>\n</ul>\n<h2 id=\"remarques-sur-une-version-du-switch-avancé\"><a href=\"#remarques-sur-une-version-du-switch-avanc%C3%A9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarques sur une version du <code class=\"language-text\">switch</code> “avancé”</h2>\n<p>Avec <code class=\"language-text\">switch</code> il est possible de tester directement une condition dans le <code class=\"language-text\">case</code>.</p>\n<p>Ainsi, en considérant que ceci existe :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPatrick</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'patrick'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isJane</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">/</span><span class=\"token operator\">^</span>jane<span class=\"token operator\">-</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Le code suivant fonctionne parfaitement :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">isPatrick</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token function\">isJane</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">giveSomeNews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't talk to strangers!</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pour plus de lisibilité, j’ai effectivement exporté les <code>case</code> dans des fonctions qui expriment clairement l’intention afin de produire un code clair avec cette syntaxe.</p>\n<p>Vous conviendrez que la logique est à présent un poil plus complexe. Dans ce cas, il est donc judicieux de travailler à <strong>rendre le code plus clair</strong>.</p>\n<p>Ceci fonctionne, peut se révéler utile et n’a pas d’équivalent avec la method lookup (que je sache).</p>\n<p>Cela étant, <strong>prenez garde aux abus de logique</strong>. Ce n’est pas parce-qu’on peut le faire, qu’on doit le faire. Veillez à garder un esprit critique sur ce que vous faîtes : est-ce vraiment nécessaire ou existe-t-il un moyen plus simple ? Peut-on trouver design plus clair pour exprimer cette logique ?</p>\n<p>Parfois on s’emporte dans des trucs “sexy”, mais un bon <strong>KISS</strong> ne fait jamais de mal !</p>\n<h2 id=\"release-the-object-oriented-kraken\"><a href=\"#release-the-object-oriented-kraken\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Release the (object-oriented) Kraken!</h2>\n<p>Le <em>method lookup / command pattern</em> est l’équivalent du <code class=\"language-text\">switch</code> dans un esprit objet. <strong>Il tend à encourager l’écriture d’un code flexible, bien organisé, orienté-objet</strong> (et ça, c’est bien !).</p>\n<p>Si <code class=\"language-text\">switch … case</code> n’est pas mauvais en soi, il peut s’avérer propice aux erreurs et encourage en soi le <em>spaghetti code</em>. Par sa nature procédurale, il peut conduire à une logique de branche complexe qui résulte souvent dans un mauvais design et donc un code peu difficile à maintenir.</p>\n<p>En fait, il n’y a pas vraiment de raison d’utiliser <code class=\"language-text\">switch</code> plutôt que son alternative quand on veut profiter de ce que JavaScript offre. Le principal, c’est de produire un code clair pour votre future-vous et les autres !</p>","fields":{"tagSlugs":["/fr/tags/javascript/","/fr/tags/oop/","/fr/tags/switch/"],"slug":"/fr/2015/01/oop-switch-revisite-en-js/"},"timeToRead":5,"frontmatter":{"title":"POO - le switch revisité en JavaScript","tags":["javascript","oop","switch"],"date":"2015-01-14T00:00:00.000Z","description":"En JavaScript, nous disposons d'une alternative plus orientée-objet, moins procédurale et propice aux erreurs que le bon vieux switch … case."}}},"pageContext":{"slug":"/fr/2015/01/oop-switch-revisite-en-js/"}}