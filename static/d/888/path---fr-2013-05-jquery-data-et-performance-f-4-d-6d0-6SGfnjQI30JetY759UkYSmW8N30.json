{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"e97db558-7201-57a3-bce9-afdc39dd1254","html":"<h2 id=\"tldr\"><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>jQuery simplifie la manipulation des données rattachées aux éléments.</p>\n<p>L’attribut HTML5 <code class=\"language-text\">data-*</code> est lié à l’objet <strong>data</strong> de jQuery pour les éléments du DOM.</p>\n<p><code class=\"language-text\">$.data(element, key[, value])</code> permet de manipuler des données rattachées aux éléments du DOM.</p>\n<p><code class=\"language-text\">$.fn.data(key[, value])</code> permet de manipuler des données rattachées aux éléments jQuery.</p>\n<p><code class=\"language-text\">$.data</code> étant plus basique que <code class=\"language-text\">$.fn.data</code>, il est plus rapide à l’exécution. Il est en revanche moins flexible, moins pratique et il ne permet pas d’accéder aux attributs <code class=\"language-text\">data-*</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- HTML --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Javascript</span>\n<span class=\"token keyword\">var</span> $el <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#main-content'</span><span class=\"token punctuation\">)</span>\n\n$el<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// rapide</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>$el<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 fois plus rapide</span></code></pre></div>\n<p>Enfin, ces 2 méthodes ne modifient pas le DOM, contrairement à <code class=\"language-text\">$.fn.attr</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$el<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &lt;div id=\"main-content\">&lt;/div></span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>$el<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &lt;div id=\"main-content\">&lt;/div></span>\n$el<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &lt;div id=\"main-content\" data-key=\"plop\">&lt;/div></span></code></pre></div>\n<h2 id=\"manipuler-des-data-avec-jquery\"><a href=\"#manipuler-des-data-avec-jquery\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manipuler des data avec jQuery</h2>\n<p>Rattacher une information à un élément et la manipuler au fil de l’exécution d’un script est une opération vraiment simple avec jQuery. En effet, la bibliothèque dispose de méthodes permettant de stocker, modifier et supprimer les données relatives à un élément.</p>\n<p>Par ailleurs, il est intéressant de savoir que les attributs <code class=\"language-text\">data-*</code> introduits par le HTML5 sont automatiquement transformés en objet <strong>data</strong> jQuery et sont donc accessibles par le biais de certaines de ces méthodes.</p>\n<h3 id=\"fndata\"><a href=\"#fndata\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$.fn.data</h3>\n<p>La méthode la plus populaire est <code class=\"language-text\">$.fn.data</code> qui s’utilise de la manière suivante :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Affecte la chaîne de caractère \"plop\" à la clef \"key\"</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Lit la donnée portant la clef \"key\"</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Code valide en HTML5 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>elem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-my-key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#elem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myKey'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Retourne \"hey\"</span></code></pre></div>\n<p>Vous noterez que l’on retire <code>data-</code> et l’on supprime les tirets du HTML pour spécifier la clef, avec une notation à la CamelCase conformément à <a href=\"http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes\">la spécification W3C</a>.</p>\n<p><a href=\"http://api.jquery.com/data/\">La documentation</a> est simple à assimiler et présente plutôt bien le concept.</p>\n<p>Notez que l’on dispose également de la méthode <code class=\"language-text\">$.fn.removeData</code> pour nettoyer tout cela si besoin :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">elem<span class=\"token punctuation\">.</span><span class=\"token function\">removeData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Bye bye !</span></code></pre></div>\n<h3 id=\"data\"><a href=\"#data\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$.data</h3>\n<p>Il existe également la méthode jQuery <code class=\"language-text\">$.data</code> plus bas-niveau, moins connue. Elle remplie quasiment le même rôle, à ceci près que sa syntaxe diffère et qu’elle considère l’élément du DOM associé en paramètre.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Affecte la chaîne de caractère \"plop\" à la clef \"key\"</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Lit la donnée portant la clef \"key\"</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Là encore, je vous invite à jeter un oeil à <a href=\"http://api.jquery.com/jQuery.data/\">la documentation officielle</a>.</p>\n<p>L’on dispose également de la méthode <code class=\"language-text\">$.removeData</code> pour supprimer des données, ainsi que de la méthode <code class=\"language-text\">$.hasData</code> pour vérifier si l’élément a des données rattachées ou non :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">hasData</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Retourne \"true\"</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">removeData</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Bye bye !</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">hasData</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Retourne \"false\"</span></code></pre></div>\n<h2 id=\"performance-vs-puissance\"><a href=\"#performance-vs-puissance\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance vs. Puissance</h2>\n<p>Quel est l’intérêt d’utiliser <code class=\"language-text\">$.data</code> quand <code class=\"language-text\">$.fn.data</code> est plus sexy me direz-vous ?</p>\n<p>Et bien comme la méthode est plus bas-niveau, plus simple, <strong>elle s’exécute aussi bien plus rapidement</strong> !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">el<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// rapide</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jusqu'à 10 fois plus rapide</span></code></pre></div>\n<p>Je vous invite à <a href=\"jsperf.com/jquery-fn-data-vs-data\">tester les performances par vous-même</a>.</p>\n<p>En contrepartie, elle doit rattacher les données à un élément du DOM tandis que <code class=\"language-text\">$.fn.data</code> peut gérer des données sur toute sorte d’objet jQuery, y compris les évènements :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Affecte l'index de chaque lien comme donnée de l'événement \"click\"</span>\n<span class=\"token comment\">// Quand on clique sur un lien, ça affiche son index</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mon index est '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Enfin, <code class=\"language-text\">$.data</code> ne gère pas les attributs HTML5 <code class=\"language-text\">data-*</code> tandis que <code class=\"language-text\">$.fn.data</code> si.</p>\n<p>En pratique :</p>\n<ul>\n<li>si l’on travaille avec un événement, on utilise <code class=\"language-text\">$.fn.data</code></li>\n<li>si l’on travaille avec un attribut HTML5 <code class=\"language-text\">data-*</code>, on utilise <code class=\"language-text\">$.fn.data</code></li>\n<li>dans tous les autres cas, on utilise <code class=\"language-text\">$.data</code> parce-qu’il est plus performant</li>\n</ul>\n<h2 id=\"un-mot-sur-le-dom\"><a href=\"#un-mot-sur-le-dom\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Un mot sur le DOM</h2>\n<p>Il est bon de noter que les deux méthodes <code class=\"language-text\">$.data</code> et <code class=\"language-text\">$.fn.data</code> ont ceci en commun qu’elles <strong>ne modifient pas le DOM</strong>.</p>\n<p>Plus concrètement, si la méthode <code class=\"language-text\">$.fn.data</code> permet d’accéder aux attributs <code class=\"language-text\">data-*</code>, elle ne les modifiera pas (pas dans le DOM). En effet, il ne faut pas se laisser embrouiller par le niveau d’abstraction de la fonction : ce n’est pas l’attribut que vous manipulez par cette méthode mais <strong>un objet jQuery</strong>, créé automatiquement pour l’occasion.</p>\n<p>En contrepartie, la méthode <code class=\"language-text\">$.fn.attr</code> est une alternative qui permet d’accéder aux attributs du DOM ainsi que de les modifier.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main-content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-my-key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#main-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myKey'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Change l'objet jQuery mais ne change pas le DOM</span>\n<span class=\"token comment\">// &lt;div id=\"main-content\" data-my-key=\"hey\">&lt;/div></span>\n<span class=\"token comment\">// Rq: $('#main-content').data('myKey') retourne bien \"plop\"</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#main-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-my-key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plop'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Change effectivement le DOM</span>\n<span class=\"token comment\">// &lt;div id=\"main-content\" data-key=\"plop\">&lt;/div></span></code></pre></div>\n<p>Dans le premier cas, nous avons bel et bien modifié l’objet jQuery, mais aucune opération n’est menée sur le HTML.</p>\n<p>Dans le second cas en revanche, c’est bel et bien le HTML que l’on modifie.</p>\n<p>En ce qui concerne la performance, il est à noter que <a href=\"http://jsperf.com/jquery-fn-data-vs-fn-attr\">le second est plus rapide que le premier</a>. Une raison à cela est probablement que <code class=\"language-text\">$.fn.data</code> fait bien plus que juste “accéder” à l’élément : il le caste en fonction de son type.</p>\n<p>Ainsi, cela peut être assez utile pour l’élaboration de plugins ou de widgets :</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>widget<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-row</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-responsive</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.widget'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">myWidget</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rows'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'responsive'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En contrepartie, <code class=\"language-text\">$.fn.attr</code> renverra toujours une chaîne de caractères, ce qui peut être utile dans certains cas.</p>\n<h2 id=\"le-mot-de-la-fin\"><a href=\"#le-mot-de-la-fin\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Le mot de la fin</h2>\n<p>Voici pour une brève (mais intense !) présentation des méthodes qui existent en jQuery pour manipuler les données.</p>\n<p>Le point sur la performance me semblait intéressant, il ne faut pas se formaliser pour autant : ce n’est pas cela qui boostera considérablement vos scripts. Cela étant, c’est toujours bon à savoir !</p>\n<p>Avec un peu de chance, cela aura été l’un de vos <em>“Aha moment”</em> en JS (<a href=\"http://hugogiraudel.com/2013/04/30/css-aha-moment/\">comme diraient certains</a>) =)</p>\n<p>Plop !</p>","fields":{"tagSlugs":["/fr/tags/javascript/","/fr/tags/jquery/","/fr/tags/performance/","/fr/tags/html-5/"],"slug":"/fr/2013/05/jquery-data-et-performance/"},"timeToRead":6,"frontmatter":{"title":"jQuery, data et performance","tags":["javascript","jquery","performance","html5"],"date":"2013-05-04T00:00:00.000Z","description":"Bonne pratique et manipulation des données en jQuery, sans colorants ni conservateurs."}}},"pageContext":{"slug":"/fr/2013/05/jquery-data-et-performance/"}}