{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about VS Code, web development and life in general.","fr":"J’écris à propos de VS Code, du développement web et de la vie en général."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"aabb4316-2945-54d3-bcf3-1f5db8570dfa","html":"<h2 id=\"whats-plop\"><a href=\"#whats-plop\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s plop?</h2>\n<p><a href=\"https://github.com/amwmedia/plop\">Plop</a> is a little node package that will ease your life whenever you need to create a new controller / router / helper / …</p>\n<blockquote>\n<p>Hey, that’s damn easy to create a new controller: copy-paste another controller code, delete specific lines you won’t use. Tadaaa!</p>\n</blockquote>\n<p>Well, now pop a bunch of legitimate questions:</p>\n<ul>\n<li>Which “other” controller do you speak about? The more recent? The “best” coded? Is there any reference controller around there?</li>\n<li>How can I get the previous point if I’m not — yet — an expert of the project codebase?</li>\n<li>How can I ensure I’m correct when I name the new file? When I delete lines I consider “useless”?</li>\n<li>Do I need to declare this new controller in some existing file? Which one? How?</li>\n</ul>\n<p>Find a good file, open it, copy its content, create a new file, paste the content, delete useless lines… It’s repetitive, error prone and doesn’t have a lot of added value. And that could take some time. Most of all, that’s frequent!</p>\n<p>It would just be awesome to write <code class=\"language-text\">plop</code> in your terminal, answer 2 questions and BIM, you’re all set!</p>\n<figure>\n  <img src=\"/plop-behavior-62658fd875867f5e906af0d0cae2be0a.gif\" alt=\"Plop behavior\">\n  <figcaption>Quick, neat. Still tempted with the copy-paste option?</figcaption>\n</figure>\n<p>That’s exactly what I’m talking about here.</p>\n<h2 id=\"setup\"><a href=\"#setup\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<h3 id=\"installation\"><a href=\"#installation\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h3>\n<p>As a node package, <code class=\"language-text\">npm install -g plop</code> and you’re ready to play with plop.</p>\n<p>You also can install it locally to the project, adding it to dependencies: <code class=\"language-text\">npm install --save-dev plop</code>.</p>\n<p>Then add it to your <code class=\"language-text\">package.json</code> scripts so you can run it with <code class=\"language-text\">npm run plop</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your-awesome-project\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome project, isn't it?\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"plop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"plop\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voilà!</p>\n<h3 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration</h3>\n<p>Plop uses a simple <code class=\"language-text\">plopfile.js</code>.</p>\n<p>Here’s the standard configuration file I’d suggest you to put at the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Here we'll define our generators</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Plop will also use templates that can either be inlined within the configuration file, or put in separate files. My suggestion is to put them into a <code class=\"language-text\">plop-templates/</code> folder, at the root of the project too.</p>\n<h3 id=\"all-inclusive-ftw\"><a href=\"#all-inclusive-ftw\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>All inclusive FTW</h3>\n<p>As you’d guess: both generator and templates are embedded in the project, just like your tests or task runner (brunch, gulp, grunt…).</p>\n<p>This has <strong>tremendous advantages</strong> over a <a href=\"http://yeoman.io/authoring/\">customized Yeoman generator</a>:</p>\n<ul>\n<li>a single repo to maintain them all</li>\n<li>everything is embedded, no need for installing yeoman and a generator to use it</li>\n<li>update a template is dead easy, you don’t a to publish a new version of your generator and make sure everyone is up-to-date before using it</li>\n</ul>\n<p>In a nutshell, when a project-specific Yeoman generator may sound overkill, plop fits perfectly. Lightweight, close to source code, it will be <strong>easier to adopt</strong>, maintain and, at the end, <strong>it will be used</strong>.</p>\n<h2 id=\"our-first-generator\"><a href=\"#our-first-generator\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our first generator</h2>\n<p>To declare a new generator, <code class=\"language-text\">plop</code> provides you <code class=\"language-text\">setGenerator</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We declare a new generator called \"module\"</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Succintly describes what generator does.</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">'Create a new module'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Get inputs from the user.</span>\n    <span class=\"token comment\">// That's Inquirer.js doing the job behind the hood.</span>\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is your module name?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// List of actions to take.</span>\n    <span class=\"token comment\">// Here we \"add\" new files from our templates.</span>\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.tests.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.tests.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"prompts\"><a href=\"#prompts\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prompts</h3>\n<p>The <code class=\"language-text\">prompts</code> part is delegated to <a href=\"https://github.com/SBoudrias/Inquirer.js/\">Inquirer.js</a>.</p>\n<p>You can just refer to <a href=\"https://github.com/SBoudrias/Inquirer.js/#objects\">their documentation</a> to learn whatever you can do — questions types, output filter, input validation…</p>\n<p>You can imagine doing some not trivial stuff:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> trimRight<span class=\"token punctuation\">,</span> isEmpty <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ensurePlural</span> <span class=\"token operator\">=</span> text <span class=\"token operator\">=></span> <span class=\"token function\">trimRight</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'s'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNotEmptyFor</span> <span class=\"token operator\">=</span> name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' is required'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is your module name?'</span><span class=\"token punctuation\">,</span>\n        validate<span class=\"token punctuation\">:</span> <span class=\"token function\">isNotEmptyFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filter<span class=\"token punctuation\">:</span> ensurePlural<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">validate</code> will ensure the given module name is not empty.</p>\n<p><code class=\"language-text\">filter</code> allow you to standardize the output: here module names should end with an <code class=\"language-text\">s</code> by convention. Even if I do it wrong and give <code class=\"language-text\">calendar</code> as the module name, I can be sure the <code class=\"language-text\">name</code> variable will be <code class=\"language-text\">calendars</code>.</p>\n<h3 id=\"actions\"><a href=\"#actions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h3>\n<p>Now it knows everything it needs, plop will run every <code class=\"language-text\">actions</code> you configured. It can use every variables that inquirer did transmit.</p>\n<p>Actions, just like templates, are parsed with <a href=\"https://github.com/wycats/handlebars.js/\">Handlebars</a>. If you understand how it works, you know how to use plop.</p>\n<p>Therefore <code class=\"language-text\">{{name}}</code> is the answer given to the prompt, validated and filtered previously. You can drop it wherever needed, in the created file path and/or its template.</p>\n<p>There are 2 types of actions that are supported yet:</p>\n<ul>\n<li><code class=\"language-text\">&quot;add&quot;</code> that will create a new file into the given <code class=\"language-text\">path</code> — which is relative to <code class=\"language-text\">plopfile.js</code></li>\n<li><code class=\"language-text\">&quot;modify&quot;</code> that will modify the file located at given <code class=\"language-text\">path</code>. It will replace the RegExp you provided in <code class=\"language-text\">pattern</code> with the template you provide</li>\n</ul>\n<p>Both actions can either use an inlined template via <code class=\"language-text\">template</code>, or retrieve it from the path you set via <code class=\"language-text\">templateFile</code>.</p>\n<h4 id=\"a-concrete-example\"><a href=\"#a-concrete-example\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A concrete example</h4>\n<p>Let’s imagine that kind of implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> modulePath <span class=\"token operator\">=</span> <span class=\"token string\">'app/modules/{{camelCase name}}.js'</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// Add a new model + tests boilerplate.</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.model.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.model.tests.js'</span><span class=\"token punctuation\">,</span>\n        templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.tests.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// Modify the module file to inject created model.</span>\n      <span class=\"token comment\">// This is basically RegExp replacement.</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'modify'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> modulePath<span class=\"token punctuation\">,</span>\n        pattern<span class=\"token punctuation\">:</span> <span class=\"token regex\">/(\\/\\/ IMPORT MODULE FILES)/g</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">'$1\\nimport Model from \"./{{camelCase name}}.model\";'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'modify'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> modulePath<span class=\"token punctuation\">,</span>\n        pattern<span class=\"token punctuation\">:</span> <span class=\"token regex\">/(const namespace = \"\\w+\";)/g</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">'$1\\n\\nModel = Model.extend( { namespace: namespace } );'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, let’s say you have the <code class=\"language-text\">plop-templates/model.js</code> template:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * TODO - Describe what your model does.\n *\n * @class {{pascalCase name}}.Model\n * @module {{pascalCase name}}\n * @constructor\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Executed on model initialization</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Considering <code class=\"language-text\">{{name}}</code> is <code class=\"language-text\">calendars</code>, then plop will create the following <code class=\"language-text\">app/modules/calendars.model.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * TODO - Describe what your model does.\n *\n * @class Calendars.Model\n * @module Calendars\n * @constructor\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Executed on model initialization</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And will also transform your current <code class=\"language-text\">app/modules/calendars.js</code> module file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'core/module'</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token comment\">// IMPORT MODULE FILES</span>\n\n<span class=\"token keyword\">const</span> namespace <span class=\"token operator\">=</span> <span class=\"token string\">'calendars'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isDisplayed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when module is considered as ready</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To insert the reference to the created model:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'core/module'</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token comment\">// IMPORT MODULE FILES</span>\n<span class=\"token keyword\">import</span> Model <span class=\"token keyword\">from</span> <span class=\"token string\">'./calendars.model'</span>\n\n<span class=\"token keyword\">const</span> namespace <span class=\"token operator\">=</span> <span class=\"token string\">'calendars'</span>\n\nModel <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> namespace<span class=\"token punctuation\">:</span> namespace <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isDisplayed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">onReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when module is considered as ready</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>With <code class=\"language-text\">&quot;add&quot;</code> and <code class=\"language-text\">&quot;modify&quot;</code> you can ease a lot of small repetitive things.</p>\n<h4 id=\"adapt-actions-to-given-answers\"><a href=\"#adapt-actions-to-given-answers\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adapt actions to given answers</h4>\n<p><a href=\"https://github.com/amwmedia/plop/pull/1\">You can pass a function to <code class=\"language-text\">actions</code></a>. This function will take user’s answers as a parameter and should return the array of actions to take.</p>\n<p>This way you can <strong>adapt actions to given answers</strong>.</p>\n<p>Let’s consider this example of new module creation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">setGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    prompts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'What is the name of your module?'</span><span class=\"token punctuation\">,</span>\n        validate<span class=\"token punctuation\">:</span> <span class=\"token function\">isNotEmptyFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filter<span class=\"token punctuation\">:</span> ensurePlural<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'dataConfig'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tell me about the data, what do you need?'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n        choices<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Nothing'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'A Model'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'model'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    actions<span class=\"token punctuation\">:</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Add a new module, whatever happens.</span>\n      <span class=\"token keyword\">let</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}/{{camelCase name}}.js'</span><span class=\"token punctuation\">,</span>\n          templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n          path<span class=\"token punctuation\">:</span>\n            <span class=\"token string\">'app/modules/{{camelCase name}}/tests/{{camelCase name}}.tests.js'</span><span class=\"token punctuation\">,</span>\n          templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/module.tests.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n\n      <span class=\"token comment\">// If you wish a Model, then we add a Model.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dataConfig <span class=\"token operator\">===</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        actions <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/modules/{{camelCase name}}.model.js'</span><span class=\"token punctuation\">,</span>\n            templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.js'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/tests/{{camelCase name}}.model.tests.js'</span><span class=\"token punctuation\">,</span>\n            templateFile<span class=\"token punctuation\">:</span> <span class=\"token string\">'plop-templates/model.tests.js'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Return the array of actions to take.</span>\n      <span class=\"token keyword\">return</span> actions\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Your generator can adapt to many different scenarios (e.g: a module with a Model, a Collection + Model, with a CollectionView or a CompositeView…).</p>\n<h3 id=\"helpers\"><a href=\"#helpers\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helpers</h3>\n<p>A little note about templating helpers of plop: these are <a href=\"http://handlebarsjs.com/expressions.html#helpers\">those from Handlebars</a>.</p>\n<p>You starts with a bunch of <a href=\"https://github.com/amwmedia/plop#baked-in-helpers\">helpers plop gives you</a>. <code class=\"language-text\">camelCase</code>, for instance, just works this way: <code class=\"language-text\">{{camelCase name}}</code> with <code class=\"language-text\">name = &quot;my awesome module&quot;</code> gives <code class=\"language-text\">&quot;myAwesomeModule&quot;</code>.</p>\n<p>You can define your own helpers within <code class=\"language-text\">plopfile.js</code> with <code class=\"language-text\">addHelper</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> plop <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  plop<span class=\"token punctuation\">.</span><span class=\"token function\">addHelper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'upperCase'</span><span class=\"token punctuation\">,</span> text <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We just created an <code class=\"language-text\">upperCase</code> helper we could use later in the <code class=\"language-text\">actions</code> and templates: <code class=\"language-text\">{{upperCase name}}</code>.</p>\n<h3 id=\"just-use-it\"><a href=\"#just-use-it\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Just use it</h3>\n<p>There you go, just type <code class=\"language-text\">npm run plop</code> — or simply <code class=\"language-text\">plop</code>, if you made it global — then follow the guide.</p>\n<p>You can also directly call a specific generator with <code class=\"language-text\">npm run plop [generatorName]</code>.</p>\n<p>Plop is fast and efficient to use, just like Yeoman. However, it’s far more lightweight and easier to maintain.</p>\n<h2 id=\"my-experience-feedback-in-production\"><a href=\"#my-experience-feedback-in-production\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My experience feedback in production</h2>\n<p>As of the time of writing, I use plop with my team on the <a href=\"http://vinoga.com\">Vinoga</a> project. Its features perfectly match our use cases.</p>\n<p>I did wrote a Yeoman generator for the project before. It was concretely unused by the team.</p>\n<p>Definitely, plop is the kind of tool that saves you 10 minutes here and there, every single day. And running <code class=\"language-text\">plop module</code> in your console, how cool is that \\o/</p>","fields":{"tagSlugs":["/tags/plop/","/tags/yeoman/","/tags/generator/","/tags/node-js/"],"slug":"/en/2015/11/plop-micro-generator-boilerplate-yeoman-alternative/"},"timeToRead":8,"frontmatter":{"title":"Plop — a micro-generator to ease your daily life","tags":["plop","yeoman","generator","node.js"],"date":"2015-11-26T00:00:00.000Z","description":"Meet plop, a little node package which quickly bootstraps new files."}}},"pageContext":{"slug":"/en/2015/11/plop-micro-generator-boilerplate-yeoman-alternative/"}}