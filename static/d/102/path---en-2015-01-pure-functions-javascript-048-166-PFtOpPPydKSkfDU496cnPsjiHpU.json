{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about web development, agile practices and personal organization.","fr":"J’écris sur le développement web, les pratiques agiles et l’organisation personnelle."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"disqusShortname":"nicoespeon","url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"188f2dfc-5780-5cb4-b0a2-c3d14c044e27","html":"<h2 id=\"whats-that-a-pure-function\"><a href=\"#whats-that-a-pure-function\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s that a “pure” function?</h2>\n<p>A pure function <strong>doesn’t depend on</strong> and <strong>doesn’t modify the states of variables out of its scope</strong>.</p>\n<p>Concretely, that means <strong>a pure function always returns the same result given same parameters</strong>. Its execution doesn’t depend on the state of the system.</p>\n<p>Pure functions are a pillar of <a href=\"http://en.wikipedia.org/wiki/Functional_programming\">functional programming</a>.</p>\n<h3 id=\"give-me-examples\"><a href=\"#give-me-examples\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Give me examples</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  items<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Now `values.a` is 3, the impure function modifies it.</span></code></pre></div>\n<p>Here we modify the attributes of the given object. Hence we modify the object which lies outside of the scope of our function: the function is impure.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// `values.a` has not been modified, it's still 1</span></code></pre></div>\n<p>Now we simply modify the parameter which is in the scope of the function, nothing is modified outside!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">impureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Actually, the value of `c` will depend on the value of `b`.</span>\n<span class=\"token comment\">// In a bigger codebase, you may forget about that, which may</span>\n<span class=\"token comment\">// surprise you because the result can vary implicitly.</span></code></pre></div>\n<p>Here, <code class=\"language-text\">b</code> is not in the scope of the function. The result will depend on the context: surprises expected!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">pureFunction</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Here it's made clear that the value of `c` will depend on</span>\n<span class=\"token comment\">// the value of `b`. No sneaky surprise behind your back.</span></code></pre></div>\n<h2 id=\"what-does-it-look-like-concretely\"><a href=\"#what-does-it-look-like-concretely\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What does it look like, concretely?</h2>\n<p>Considering this code exists:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getMinQuantity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A pure fonction which returns a number, regarding</span>\n  <span class=\"token comment\">// the given name.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s take the following code example that may exist in a lambda project:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A bunch of code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      initialChildIndex<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't add quantity text!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> initialChildIndex <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>initialChildIndex <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setQuantityTextColor</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> initialChildIndex<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  setQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> minQuantity\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A bunch of code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ve got <code class=\"language-text\">addQuantityText()</code>, <code class=\"language-text\">formatQuantityText()</code> and <code class=\"language-text\">setQuantityTextColor()</code> which are all impure.</p>\n<p>In our context, <code class=\"language-text\">addQuantityText()</code> is the method actually used when you want to “display the quantity” in our <code class=\"language-text\">$$boxContainer</code>. This is the entry point, dealing with implementation details. You’ll look at this method when something goes wrong with <code class=\"language-text\">$$quantity</code>. Which is likely to be the start of a treasure hunt — but not a funny one.</p>\n<p>The way it was written could be error-prone on the long term.</p>\n<h3 id=\"when-it-gets-complicated\"><a href=\"#when-it-gets-complicated\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When it gets complicated</h3>\n<p>In this example, the execution order of functions is critical.</p>\n<p><strong>Just swap 2 lines and you’ll break everything</strong>. It may sound obvious, but it’s much more difficult to debug:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A bunch of code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      initialChildIndex<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't add quantity text!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> initialChildIndex <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>initialChildIndex <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setQuantityTextColor</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  setQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$$quantity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> minQuantity\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A bunch of code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now there is an error in the code. Problem is: that’s hard stuff to detect!</p>\n<p>Here, <code class=\"language-text\">setQuantityTextColor()</code> is responsible of the color of <code class=\"language-text\">$$quantity</code>. And so you need to navigate through methods to catch the one which is the last which modifies the object, then reconstitute the whole flow to understand what’s going wrong.</p>\n<p>At this point you could even regret having decomposed <code class=\"language-text\">formatQuantityText()</code> into smaller methods to simplify implementation details.</p>\n<p>Generally speaking, that’s a lot of code that needs to be considered when you are debugging. And if you get thinking that splitting a big method into smaller ones just make the debug difficult, then the concept of <strong>pure function</strong> is gaining interest.</p>\n<h3 id=\"lets-do-that-with-pure-functions\"><a href=\"#lets-do-that-with-pure-functions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s do that with pure functions</h3>\n<p>We’ll use a maximum of pure functions to rewrite our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A bunch of code…</span>\n\n  <span class=\"token comment\">// All the modifications of system state are grouped here.</span>\n  <span class=\"token comment\">// This only method is responsible for the insertion of</span>\n  <span class=\"token comment\">// an element, which makes debug simpler and limit</span>\n  <span class=\"token comment\">// side effects.</span>\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// This method doesn't have side effects.</span>\n  <span class=\"token comment\">// It just call other pure functions. It creates and return the</span>\n  <span class=\"token comment\">// canvas object desired, correctly configured!</span>\n  formatQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n    <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n    $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n    $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n    $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> $$quantity\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// This method doesn't have side effects neither.</span>\n  <span class=\"token comment\">// It returns the correct color, regarding the given quantity.</span>\n  getQuantityTextColor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">&amp;&amp;</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n    <span class=\"token keyword\">return</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A bunch of code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is no fundamental change in this new version. However, there are non-negligible benefits.</p>\n<p>What we did here:</p>\n<ul>\n<li><code class=\"language-text\">getQuantityTextColor()</code> instead of <code class=\"language-text\">setQuantityTextColor()</code></li>\n<li>the method returns a color regarding the quantity we give to it instead of modifying the object directly, as we did before</li>\n<li>methods don’t consider variables out of their scope</li>\n<li>methods only call pure methods</li>\n<li>we isolated the creation / modification of the <code class=\"language-text\">$$quantity</code> object in <code class=\"language-text\">formatQuantityText()</code></li>\n<li>we isolated modifications of the system state in <code class=\"language-text\">addQuantityText()</code></li>\n</ul>\n<p>Doing so, we removed methods with side effects. We just <strong>simplified the code maintenance</strong>. If there is an issue with <code class=\"language-text\">$$quantity</code> to occur, there is only one method to look for.</p>\n<h3 id=\"simplify-the-interface\"><a href=\"#simplify-the-interface\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simplify the interface</h3>\n<p>We used here public methods. It’d be perfectly acceptable — completely relevant — to make them private.</p>\n<p>Indeed, there don’t have much to do with our API since <strong>their role is to simplify the interface</strong>. Have a look to my post on <a href=\"/en/2014/12/private-methods-backbonejs\">private methods with Backbone.js</a> if you get scratching your head with that.</p>\n<p>As they are pures, to extract them is dead easy since they don’t rely on a specific context, just parameters!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> minQuantity <span class=\"token operator\">=</span> <span class=\"token function\">getMinQuantity</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> hasEnoughQuantity <span class=\"token operator\">=</span> quantity <span class=\"token operator\">&amp;&amp;</span> quantity <span class=\"token operator\">>=</span> minQuantity\n\n  <span class=\"token keyword\">return</span> hasEnoughQuantity <span class=\"token operator\">?</span> <span class=\"token string\">'green'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> namespace <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>namespace <span class=\"token operator\">||</span> <span class=\"token string\">'quantity'</span>\n  <span class=\"token keyword\">var</span> quantity <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">||</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// implementation details hidden</span>\n  $$quantity<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> namespace\n  $$quantity<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> quantity\n  $$quantity<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token function\">getQuantityTextColor</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">,</span> namespace<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> $$quantity\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then, later in the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> popover <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A bunch of code…</span>\n\n  addQuantityText<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$$boxContainer is not configured'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> quantityTextOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> $$quantity <span class=\"token operator\">=</span> <span class=\"token function\">formatQuantityText</span><span class=\"token punctuation\">(</span>quantityTextOptions<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$boxContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>$$quantity<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// A bunch of code…</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"advantages-of-pure-functions\"><a href=\"#advantages-of-pure-functions\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advantages of pure functions</h2>\n<p>The main advantage of a pure function is that <strong>it doesn’t have any side effect</strong>. It doesn’t modify the state of the system outside of their scope. Then, they just simplify and clarify the code: when you call a pure function, you just need to focus on the return value as you know you didn’t broke anything elsewhere doing so.</p>\n<p>A pure function is also robust. <strong>Its order of execution doesn’t have any impact on the system</strong>. Operations with pure functions could be parallelized.</p>\n<p>Also, <strong>it’s very easy to unit test a pure function</strong> since there is no context to consider. Just focus on inputs / outputs.</p>\n<p>Finally, maximizing the use of pure functions <strong>makes your code simpler, more flexible</strong>.</p>\n<h2 id=\"a-matter-of-design\"><a href=\"#a-matter-of-design\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A matter of design</h2>\n<p>In practice, when you are doing object-oriented code you may think that functional programming concepts couldn’t fit in. This is simply wrong as <a href=\"http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html\">OOP and FP are absolutely compatibles</a>!</p>\n<p>Indeed, the idea here is simple: <strong>simplify your code by limiting the number of functions that has an impact on the system</strong>.</p>\n<p>If you force yourself to think twice to maximize the number of pure functions in your code, you’ll probably make your maintenance / life / debug easier!</p>\n<p>Well, you’ve got the idea. Which is often, in practice, a matter of design, the choice between a <code class=\"language-text\">get</code> and a <code class=\"language-text\">set</code> for instance.</p>\n<h2 id=\"further-reading\"><a href=\"#further-reading\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Reading</h2>\n<ul>\n<li><a href=\"https://www.kompulsa.com/javascript-basics-introduction-to-functions/\">Introduction To Functions</a></li>\n</ul>","fields":{"tagSlugs":["/tags/javascript/","/tags/functional-programming/"]},"frontmatter":{"title":"Pure functions in JavaScript","tags":["javascript","functional programming"],"date":"2015-01-25T00:00:00.000Z","description":"What is a pure function and why should you consider it in JavaScript?"}}},"pageContext":{"slug":"/en/2015/01/pure-functions-javascript/"}}