{"data":{"site":{"siteMetadata":{"title":"@nicoespeon's blog","subtitles":{"en":"I write about VS Code, web development and life in general.","fr":"J’écris à propos de VS Code, du développement web et de la vie en général."},"author":{"name":"Nicolas Carlo","twitter":"nicoespeon"},"url":"https://www.nicoespeon.com"}},"markdownRemark":{"id":"03d5af8f-f379-5fbc-9e0c-9d7a2fbea3f9","html":"<h2 id=\"tldr\"><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>Ne pas se préoccuper de la portée des variables en Javascript, c’est aller au-devant de graves déconvenues. Il est important <strong>d’isoler l’environnement de son script</strong> afin de ne pas modifier involontairement des variables globales lors de son exécution.</p>\n<p>Les <strong>fonctions anonymes auto-exécutantes</strong> (ou <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">IIFE</a>, selon) permettent donc d’isoler le code sans perturber son exécution :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// votre code JS</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>De plus, elle rendent le code plus flexible et robuste en permettant de créer des alias aux variables globales passées en paramètre :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// votre code JS</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"enveloppé-piqué-portée-\"><a href=\"#envelopp%C3%A9-piqu%C3%A9-port%C3%A9e-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enveloppé, Piqué, Porté(e) !</h2>\n<p>Je laisse les premiers points aux Étoiles et je me concentrerais ici sur la question de <strong>la portée des variables</strong> en Javascript. Ce point, auquel on ne songe pas assez, est en effet susceptible de causer bien des soucis à grande échelle si l’on n’y prend pas garde.</p>\n<p>Pour faire simple, il serait fort regrettable que le script que l’on est en train d’écrire ne se comporte pas comme prévu parce-que la variable <code class=\"language-text\">gobgob</code> que l’on déclare est déjà utilisée ailleurs et qu’on n’y a pas fait attention.</p>\n<p>Il serait également gênant que notre superbe plugin de slideshow se mettent à planter complètement à l’exécution de notre script. Pourquoi ? Parce-que nous n’aurons pas pris garde au fait que ce magnifique plugin utilise la même variable que nous, et que nous venons tout juste de changer sa valeur (du coup) !</p>\n<p>Pour éviter ce genre de scénario bien fâcheux, il faut <strong>isoler les variables</strong> de notre script du reste de l’environnement. C’est tout à fait réalisable et, si ce plugin avait été si magnifique que ça, c’est ce qu’il aurait fait !</p>\n<h3 id=\"petit-rappel-sur-la-portée-des-variables-en-js\"><a href=\"#petit-rappel-sur-la-port%C3%A9e-des-variables-en-js\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Petit rappel sur la portée des variables en JS</h3>\n<p>En déclarant une variable comme il se doit, celle-ci est accessible à tout le script dans lequel elle est contenue, y compris dans les fonctions qui y sont déclarées.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey !'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">maFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Renvoie \"Hey !\"</span>\n<span class=\"token function\">maFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En revanche, une variable proprement déclarée dans une fonction n’est pas accessible à l’extérieur de celle-ci : elle est isolée dans la fonction.</p>\n<p>Cependant, le fait d’omettre le mot clef <code class=\"language-text\">var</code> lors de la déclaration d’une variable rend celle-ci <strong>globale</strong>, c’est à dire accessible depuis tout le script (ce qui, en général, n’est pas très très propre).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">maFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey !'</span>\n  gubgub <span class=\"token operator\">=</span> <span class=\"token string\">'Ho !'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">maFonction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Renvoie \"ReferenceError: gobgob is not defined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Renvoie \"Ho !\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gubgub<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ce que nous souhaitons, c’est faire en sorte que les variables de notre script ne viennent pas modifier d’éventuelles variables qui existeraient déjà ailleurs !</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n\n<span class=\"token comment\">// (…)</span>\n<span class=\"token comment\">// Quelque part, bien loin dans votre JavaScript…</span>\n<span class=\"token comment\">// … une surchage sauvage d'une variable existante (et oubliée) apparaît !</span>\n<span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Ho!'</span></code></pre></div>\n<h2 id=\"sortez-couverts-\"><a href=\"#sortez-couverts-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sortez couverts !</h2>\n<p>Pour résoudre nos soucis, il s’agit donc <strong>d’isoler les variables</strong> afin de limiter leur portée au seul endroit qui nous intéresse et ne pas venir redéfinir par mégarde des variables ou polluer l’environnement (écologie toussa toussa) avec des variables globales qui n’ont pas lieu d’être.</p>\n<p>Pour cela, il s’agit d’envelopper notre code Javascript dans ce que l’on appelle basiquement une <strong>fonction anonyme auto-exécutante</strong> :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// votre code JS</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cette encapsulation est donc :</p>\n<ul>\n<li><strong>anonyme</strong> car la fonction ne porte pas de nom</li>\n<li><strong>auto-exécutante</strong> car elle est interprétée directement grâce au petit <code class=\"language-text\">();</code> final</li>\n</ul>\n<p>Pour reprendre notre exemple précédent :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey !'</span>\n\n<span class=\"token comment\">// On enveloppe notre script comme il faut</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Ho!'</span>\n\n  <span class=\"token comment\">// Renvoie \"Ho!\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Renvoie \"Hey !\" -> bingo !</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Rien n’est boulversé dans l’exécution du script.</p>\n<p>Par contre, <strong>nous n’avons plus à nous soucier des autres variables</strong> qui peuvent exister à partir du moment où nous travaillons dans notre environnement isolé : nous ne venons pas modifier par mégarde une variable globale !</p>\n<p>En revanche, rien ne nous empêche d’utiliser une variable globale pour autant :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey !'</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Renvoie \"Hey !\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"renommer-des-variables-globales-dans-notre-script\"><a href=\"#renommer-des-variables-globales-dans-notre-script\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Renommer des variables globales dans notre script</h3>\n<p>Il est également possible de <strong>passer des variables en paramètre</strong>, généralement afin de les redéfinir pour l’usage de notre script. C’est d’ailleurs une bonne pratique à adopter lorsque vous travailler avec une librairie telle que <em>jQuery</em> !</p>\n<p>Imaginez que vous souhaitiez créer un petit script sympatoche. Si vous utilisez <em>jQuery</em>, vous allez probablement utiliser des <code class=\"language-text\">$</code> à gogo !</p>\n<p>Seulement, que se passe-t-il si demain une autre bibliothèque vient complémenter <em>jQuery</em> et utilise également le <code class=\"language-text\">$</code> comme référence ? Vous aller passer <em>jQuery</em> <a href=\"http://api.jquery.com/jQuery.noConflict/\">en mode <code class=\"language-text\">noConflict()</code></a>… et vous allez devoir reprendre votre script pour transformer tous vos <code class=\"language-text\">$</code> en <code class=\"language-text\">jQuery</code>.</p>\n<p>Ou alors, vous avez retenu ce que vous avez lu ici et 2 lignes de code vous permettront d’isoler bien proprement votre script, qui s’exécutera quoiqu’il arrive :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// votre script JS avec des $ tout partout</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<p>L’avantage de cette technique c’est que vous pouvez rapidement switcher de librairie sans modifier votre script, qui gagne donc en flexibilité et stabilité :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// votre script JS avec des $ tout partout</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Zepto<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Note performance</strong> - Le double effet Kiss Cool de cette technique intervient lors de la minification de votre script. En effet, il sera possible de minifier les noms de toutes vos variables sans affecter le code (puisqu’il s’agit ni plus ni moins d’alias au final), donc de gagner de la place.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Exemple où les occurrences à `window` ont été minimifiées</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Renvoie `true`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"astuce--créer-un-alias-pour-undefined\"><a href=\"#astuce--cr%C3%A9er-un-alias-pour-undefined\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Astuce : Créer un alias pour <code class=\"language-text\">undefined</code></h3>\n<p>Une bonne pratique, qui est également utilisée <a href=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.js\">dans le code source de <em>jQuery</em></a>, consiste à déclarer un paramètre supplémentaire non défini, qui vaudra alors <code class=\"language-text\">undefined</code> dans votre script :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Crée une variable gobgob valant `undefined`</span>\n  <span class=\"token keyword\">var</span> gobgob\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Renvoie `true`</span>\n\n  <span class=\"token comment\">// Notre dernière variable est donc un alias pour `undefined`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"astuce-bis--accéder-au-variables-en-dehors\"><a href=\"#astuce-bis--acc%C3%A9der-au-variables-en-dehors\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Astuce bis : Accéder au variables, en dehors</h3>\n<p><em>Merci <a href=\"https://twitter.com/fabien0102\">@fabien0102</a> pour m’avoir fait remarquer qu’il manquait ce point de détail.</em></p>\n<p>Isoler son code, c’est bien. Mais parfois, on développe un plugin/une librairie et on aimerait bien pouvoir accéder à notre objet de l’extérieur, histoire de pouvoir s’en servir.</p>\n<p>Il existe probablement différentes alternatives, mais en voici une toute simple : il suffit d’attacher notre variable à <code class=\"language-text\">window</code>, et ça marche.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Crée une variable gobgob et l'attache à window</span>\n  <span class=\"token keyword\">var</span> gobgob <span class=\"token operator\">=</span> <span class=\"token string\">'Hey !'</span>\n  window<span class=\"token punctuation\">.</span>gobgob <span class=\"token operator\">=</span> gobgob\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Renvoie \"Hey !\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gobgob<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"le-mot-de-la-fin\"><a href=\"#le-mot-de-la-fin\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Le mot de la fin</h2>\n<p>Cet article français se place dans la lignée des bonnes pratiques Javascript. C’est un premier pas vers l’élaboration de splendides scripts modulaires qui sont les composantes de plus gros projets.</p>\n<p>Ce n’est pas quelque chose de radicalement nouveau pour autant, bien qu’il n’y ait pas masse d’articles francophones sur la question (à ce niveau là, il faut généralement se mettre à la langue de Shakespeare).</p>\n<p>Enfin, je trouvais que cela faisait une bonne mise en pied à l’explication du fonctionnement d’un plugin jQuery (ça c’est du teasing).</p>\n<p>Comme d’habitude, n’hésitez pas à émettre remarques, suggestions et questions aussi diverses que variées ci-dessous.</p>\n<p>Plop !</p>","fields":{"tagSlugs":["/fr/tags/javascript/","/fr/tags/jquery/"],"slug":"/fr/2013/05/bien-isoler-ses-variables-en-javascript/"},"timeToRead":6,"frontmatter":{"title":"Bien isoler ses variables en Javascript","tags":["javascript","jquery"],"date":"2013-05-19T00:00:00.000Z","description":"Une histoire de fonctions anonymes et auto-exécutantes (IIFE)… Parce-qu'on n'y pense pas assez, et que c'est bien pratique quand même !"}}},"pageContext":{"slug":"/fr/2013/05/bien-isoler-ses-variables-en-javascript/"}}